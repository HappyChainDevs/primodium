// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "@latticexyz/store/src/IStore.sol";
import { createPrototype } from "../../libraries/prototypes/createPrototype.sol";
import { ERock, EBuilding } from "../Types.sol";
import { P_Blueprint, P_BlueprintTableId, P_MaxLevel, P_MaxLevelTableId } from "../Tables.sol";

bytes32 constant prototypeId = "DroneFactory";
bytes32 constant DroneFactoryPrototypeId = prototypeId;
uint256 constant LENGTH = 2;

function DroneFactoryKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = prototypeId;

  return _keyTuple;
}

function DroneFactoryPrototype(IStore store) {
  bytes32[] memory keys = DroneFactoryKeys();
  bytes32[] memory tableIds = new bytes32[](LENGTH);
  bytes[] memory values = new bytes[](LENGTH);

  tableIds[0] = P_BlueprintTableId;
  tableIds[1] = P_MaxLevelTableId;

  int32[] memory p_blueprint_value = new int32[](18);
  p_blueprint_value[0] = 0;
  p_blueprint_value[1] = 0;
  p_blueprint_value[2] = 0;
  p_blueprint_value[3] = -1;
  p_blueprint_value[4] = 0;
  p_blueprint_value[5] = -2;
  p_blueprint_value[6] = -1;
  p_blueprint_value[7] = 0;
  p_blueprint_value[8] = -1;
  p_blueprint_value[9] = -1;
  p_blueprint_value[10] = -1;
  p_blueprint_value[11] = -2;
  p_blueprint_value[12] = -2;
  p_blueprint_value[13] = 0;
  p_blueprint_value[14] = -2;
  p_blueprint_value[15] = -1;
  p_blueprint_value[16] = -2;
  p_blueprint_value[17] = -2;
  values[0] = P_Blueprint.encode(p_blueprint_value);
  values[1] = P_MaxLevel.encode(4);

  createPrototype(store, keys, tableIds, values);
}
