// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

import { IStore } from "@latticexyz/store/src/IStore.sol";
import { createPrototype } from "../../libraries/prototypes/createPrototype.sol";
import { ERock, EBuilding } from "../Types.sol";
import { Dimensions, DimensionsTableId, Dimensions, DimensionsTableId, Dimensions, DimensionsTableId, Dimensions, DimensionsTableId, Dimensions, DimensionsTableId, Dimensions, DimensionsTableId, Dimensions, DimensionsTableId } from "../Tables.sol";

bytes32 constant prototypeId = "Expansion";
bytes32 constant ExpansionPrototypeId = prototypeId;
uint256 constant LENGTH = 0;

function ExpansionKeys() pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](1);
  _keyTuple[0] = prototypeId;

  return _keyTuple;
}

function ExpansionLevelKeys(uint32 level) pure returns (bytes32[] memory) {
  bytes32[] memory _keyTuple = new bytes32[](2);
  _keyTuple[0] = prototypeId;
  _keyTuple[1] = bytes32(uint256(level));

  return _keyTuple;
}

function ExpansionPrototype(IStore store) {
  bytes32[] memory keys = ExpansionKeys();
  bytes32[] memory tableIds = new bytes32[](LENGTH);
  bytes[] memory values = new bytes[](LENGTH);

  createPrototype(store, keys, tableIds, values);

  bytes32[] memory levelKeys;

  /* ----------------------------- LEVEL 0 ----------------------------- */
  levelKeys = ExpansionLevelKeys(0);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(13, 11);

  createPrototype(store, levelKeys, tableIds, values);

  /* ----------------------------- LEVEL 1 ----------------------------- */
  levelKeys = ExpansionLevelKeys(1);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(17, 13);

  createPrototype(store, levelKeys, tableIds, values);

  /* ----------------------------- LEVEL 2 ----------------------------- */
  levelKeys = ExpansionLevelKeys(2);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(21, 15);

  createPrototype(store, levelKeys, tableIds, values);

  /* ----------------------------- LEVEL 3 ----------------------------- */
  levelKeys = ExpansionLevelKeys(3);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(25, 17);

  createPrototype(store, levelKeys, tableIds, values);

  /* ----------------------------- LEVEL 4 ----------------------------- */
  levelKeys = ExpansionLevelKeys(4);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(29, 19);

  createPrototype(store, levelKeys, tableIds, values);

  /* ----------------------------- LEVEL 5 ----------------------------- */
  levelKeys = ExpansionLevelKeys(5);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(33, 13);

  createPrototype(store, levelKeys, tableIds, values);

  /* ----------------------------- LEVEL 6 ----------------------------- */
  levelKeys = ExpansionLevelKeys(6);
  tableIds = new bytes32[](1);
  values = new bytes[](1);

  tableIds[0] = DimensionsTableId;

  values[0] = Dimensions.encode(37, 25);

  createPrototype(store, levelKeys, tableIds, values);
}
