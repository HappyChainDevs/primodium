/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { AttackSystem, AttackSystemInterface } from "../AttackSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int32",
            name: "x",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "y",
            type: "int32",
          },
        ],
        internalType: "struct Coord",
        name: "coord",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "attackEntity",
        type: "uint256",
      },
    ],
    name: "attack",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "arguments",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int32",
            name: "x",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "y",
            type: "int32",
          },
        ],
        internalType: "struct Coord",
        name: "coord",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "int32",
            name: "x",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "y",
            type: "int32",
          },
        ],
        internalType: "struct Coord",
        name: "targetCoord",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a4738038062001a4783398101604081905262000034916200022c565b818162000041336200010f565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200026b565b600080546001600160a01b03199081166001600160a01b0393841690811790925560018054909116928516928317905562000105919062000183602090811b6200100117901c565b5050505062000292565b600062000126620001ef60201b620010921760201c565b80546040519192506001600160a01b03808516929116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8780546001600160a01b039384166001600160a01b0319918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6001600160a01b03811681146200022957600080fd5b50565b600080604083850312156200024057600080fd5b82516200024d8162000213565b6020840151909250620002608162000213565b809150509250929050565b6000602082840312156200027e57600080fd5b81516200028b8162000213565b9392505050565b6117a580620002a26000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a5cf4fdb11610050578063a5cf4fdb146100c2578063aac25b73146100e7578063f2fde38b146100fa57600080fd5b806309c5eabe1461006c5780638da5cb5b14610095575b600080fd5b61007f61007a36600461135d565b61010f565b60405161008c9190611410565b60405180910390f35b61009d6106dc565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b6100d56100d03660046114cd565b610721565b60405160ff909116815260200161008c565b61007f6100f53660046114f8565b610f52565b61010d61010836600461152d565b610f85565b005b606060008083806020019051810190610128919061159a565b9150915060006040518060a0016040528061018660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f49a4584d9706380e35459e1f31e673445371b5bac20aa516f8ba8650b184310660001c6110b6565b73ffffffffffffffffffffffffffffffffffffffff90811682526000546020909201916101d491167f30f1c358b0a577824afcc8e464bcbd763eba254820a547b425765e75cc511f1e6110b6565b73ffffffffffffffffffffffffffffffffffffffff908116825260005460209092019161022291167faf90be6cd7aa92d6569a9ae629178b74e1b0fbdd1097c27ec1dfffd2dc4c75406110b6565b73ffffffffffffffffffffffffffffffffffffffff908116825260005460209092019161027091167fe95fc307e3922a4ed7e1a9d135b2e79aad91e806428d8c7ec9a376dfc8aede5e6110b6565b73ffffffffffffffffffffffffffffffffffffffff90811682526000546020909201916102be91167f2fc9fa89c3e33fdaa5feead211018b3d0b1d3edd613228f7f320915fddd8d0396110b6565b73ffffffffffffffffffffffffffffffffffffffff1681525090506000816000015173ffffffffffffffffffffffffffffffffffffffff1663bf3bf26a856040518263ffffffff1660e01b815260040161031891906115c6565b600060405180830381865afa158015610335573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261037b91908101906115e7565b90508051600114610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f5b41747461636b53797374656d5d2043616e6e6f742061747461636b2066726f60448201527f6d20616e20656d7074792074696c65000000000000000000000000000000000060648201526084015b60405180910390fd5b6000826020015173ffffffffffffffffffffffffffffffffffffffff16630ff4c916836000815181106104485761044861168d565b60200260200101516040518263ffffffff1660e01b815260040161046e91815260200190565b602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af91906116bc565b90507f9d47592473d41327e0ccb0bb0dc69c74c6ac29b77beb0fc78a1c84d6f0bcf87b8114610560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f5b41747461636b53797374656d5d2043616e6e6f742061747461636b2066726f60448201527f6d2061206e6f6e2d73696c6f2074696c65000000000000000000000000000000606482015260840161040a565b6000836040015173ffffffffffffffffffffffffffffffffffffffff16630ff4c916846000815181106105955761059561168d565b60200260200101516040518263ffffffff1660e01b81526004016105bb91815260200190565b602060405180830381865afa1580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc91906116bc565b905033811461068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f5b41747461636b53797374656d5d2043616e6e6f742061747461636b2066726f60448201527f6d20612074696c6520796f7520646f206e6f74206f776e000000000000000000606482015260840161040a565b6106b185846000815181106106a4576106a461168d565b6020026020010151610721565b6040805160ff9092166020830152016040516020818303038152906040529650505050505050919050565b600061071c7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6040805160a08101909152600080549091829181906107769073ffffffffffffffffffffffffffffffffffffffff167f49a4584d9706380e35459e1f31e673445371b5bac20aa516f8ba8650b18431066110b6565b73ffffffffffffffffffffffffffffffffffffffff90811682526000546020909201916107c491167f30f1c358b0a577824afcc8e464bcbd763eba254820a547b425765e75cc511f1e6110b6565b73ffffffffffffffffffffffffffffffffffffffff908116825260005460209092019161081291167faf90be6cd7aa92d6569a9ae629178b74e1b0fbdd1097c27ec1dfffd2dc4c75406110b6565b73ffffffffffffffffffffffffffffffffffffffff908116825260005460209092019161086091167fe95fc307e3922a4ed7e1a9d135b2e79aad91e806428d8c7ec9a376dfc8aede5e6110b6565b73ffffffffffffffffffffffffffffffffffffffff90811682526000546020909201916108ae91167f2fc9fa89c3e33fdaa5feead211018b3d0b1d3edd613228f7f320915fddd8d0396110b6565b73ffffffffffffffffffffffffffffffffffffffff1681525090506000604051806020016040528061092360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f2b1b2c311687f6d088e6878d29798bd311968672098eb007336cfa1029c1c3da60001c6110b6565b73ffffffffffffffffffffffffffffffffffffffff1681525090506000826000015173ffffffffffffffffffffffffffffffffffffffff1663bf3bf26a876040518263ffffffff1660e01b815260040161097d91906115c6565b600060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109e091908101906115e7565b90508051600103610f44576000836040015173ffffffffffffffffffffffffffffffffffffffff16630ff4c91683600081518110610a2057610a2061168d565b60200260200101516040518263ffffffff1660e01b8152600401610a4691815260200190565b602060405180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8791906116bc565b9050338114610c725782516040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff9091169063cccf7a8e90602401602060405180830381865afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906116d5565b15610c725782516040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810188905260009173ffffffffffffffffffffffffffffffffffffffff1690630ff4c91690602401602060405180830381865afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba91906116bc565b90508015610c5e57835173ffffffffffffffffffffffffffffffffffffffff16631ab06ee588610beb6001856116f7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b50505050610c6c565b600095505050505050610f4c565b50610c7f565b6000945050505050610f4c565b836080015173ffffffffffffffffffffffffffffffffffffffff1663cccf7a8e83600081518110610cb257610cb261168d565b60200260200101516040518263ffffffff1660e01b8152600401610cd891815260200190565b602060405180830381865afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1991906116d5565b15610e7f576000846080015173ffffffffffffffffffffffffffffffffffffffff16630ff4c91684600081518110610d5357610d5361168d565b60200260200101516040518263ffffffff1660e01b8152600401610d7991815260200190565b602060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba91906116bc565b90508015610e7957846080015173ffffffffffffffffffffffffffffffffffffffff16631ab06ee584600081518110610df557610df561168d565b6020026020010151601484610e0a91906116f7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b505050505b50610f37565b836080015173ffffffffffffffffffffffffffffffffffffffff16631ab06ee583600081518110610eb257610eb261168d565b602002602001015160146064610ec891906116f7565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b158015610f1e57600080fd5b505af1158015610f32573d6000803e3d6000fd5b505050505b6001945050505050610f4c565b600093505050505b92915050565b6060610f7e8383604051602001610f6a929190611731565b60405160208183030381529060405261010f565b9392505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610ff5576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ffe81611202565b50565b7ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a868054929093169116179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015611126573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261116c91908101906115e7565b905080516000036111d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f742072656769737465726564000000000000000000000000000000604482015260640161040a565b6111fa816000815181106111ef576111ef61168d565b602002602001015190565b949350505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804608054604051610ffe928492909173ffffffffffffffffffffffffffffffffffffffff8085169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611308576113086112b6565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611355576113556112b6565b604052919050565b6000602080838503121561137057600080fd5b823567ffffffffffffffff8082111561138857600080fd5b818501915085601f83011261139c57600080fd5b8135818111156113ae576113ae6112b6565b6113de847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161130e565b915080825286848285010111156113f457600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b8181101561143d57858101830151858201604001528201611421565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b8060030b8114610ffe57600080fd5b60006040828403121561149d57600080fd5b6114a56112e5565b905081356114b28161147c565b815260208201356114c28161147c565b602082015292915050565b600080606083850312156114e057600080fd5b6114ea848461148b565b946040939093013593505050565b6000806080838503121561150b57600080fd5b611515848461148b565b9150611524846040850161148b565b90509250929050565b60006020828403121561153f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610f7e57600080fd5b60006040828403121561157557600080fd5b61157d6112e5565b9050815161158a8161147c565b815260208201516114c28161147c565b600080608083850312156115ad57600080fd5b6115b78484611563565b91506115248460408501611563565b60408101610f4c8284805160030b8252602081015160030b60208301525050565b600060208083850312156115fa57600080fd5b825167ffffffffffffffff8082111561161257600080fd5b818501915085601f83011261162657600080fd5b815181811115611638576116386112b6565b8060051b915061164984830161130e565b818152918301840191848101908884111561166357600080fd5b938501935b8385101561168157845182529385019390850190611668565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156116ce57600080fd5b5051919050565b6000602082840312156116e757600080fd5b81518015158114610f7e57600080fd5b81810381811115610f4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b608081016117528285805160030b8252602081015160030b60208301525050565b8251600390810b60408401526020840151900b6060830152610f7e56fea2646970667358221220ff1ff617fe14a2deb77d9bce0176784f542791946418b9ca8362013df0aef6ef64736f6c63430008110033";

type AttackSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackSystem__factory extends ContractFactory {
  constructor(...args: AttackSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttackSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<AttackSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): AttackSystem {
    return super.attach(address) as AttackSystem;
  }
  override connect(signer: Signer): AttackSystem__factory {
    return super.connect(signer) as AttackSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackSystemInterface {
    return new utils.Interface(_abi) as AttackSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackSystem {
    return new Contract(address, _abi, signerOrProvider) as AttackSystem;
  }
}
