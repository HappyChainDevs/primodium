/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ClaimFromMineSystem,
  ClaimFromMineSystemInterface,
} from "../ClaimFromMineSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int32",
            name: "x",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "y",
            type: "int32",
          },
          {
            internalType: "uint256",
            name: "parent",
            type: "uint256",
          },
        ],
        internalType: "struct Coord",
        name: "coord",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001763380380620017638339810160408190526200003491620001e0565b8181818162000043336200014d565b6001600160a01b038116156200005a5780620000bf565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000099573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bf91906200021f565b600080546001600160a01b039283166001600160a01b0319918216811790925560018054938616938216841790557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805482169093179092557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a86805490921617905550505050505062000246565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381168114620001dd57600080fd5b50565b60008060408385031215620001f457600080fd5b82516200020181620001c7565b60208401519092506200021481620001c7565b809150509250929050565b6000602082840312156200023257600080fd5b81516200023f81620001c7565b9392505050565b61150d80620002566000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780634f2870da1461007a5780638da5cb5b1461008d578063f2fde38b146100ba575b600080fd5b61006461005f3660046110ba565b6100cf565b604051610071919061115e565b60405180910390f35b6100646100883660046111be565b610a82565b610095610ad9565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100cd6100c836600461122d565b610b1e565b005b606060003390506000838060200190518101906100ec9190611251565b905060006100f982610b9a565b60005490915061013f9073ffffffffffffffffffffffffffffffffffffffff167f7562ebb298d855e68fb2922ace89e271e36c031fb473ee4be72f900215d523c5610d5a565b73ffffffffffffffffffffffffffffffffffffffff1663cccf7a8e826040518263ffffffff1660e01b815260040161017991815260200190565b602060405180830381865afa158015610196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ba919061129e565b610272576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f5b436c61696d46726f6d4d696e6553797374656d5d2043616e6e6f7420636c61908201527f696d2066726f6d206d696e6573206f6e20616e20656d70747920636f6f72646960648201527f6e61746500000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b600080546102b69073ffffffffffffffffffffffffffffffffffffffff167faf90be6cd7aa92d6569a9ae629178b74e1b0fbdd1097c27ec1dfffd2dc4c7540610d5a565b73ffffffffffffffffffffffffffffffffffffffff16630ff4c916836040518263ffffffff1660e01b81526004016102f091815260200190565b602060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906112c0565b90508381146103e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f5b436c61696d46726f6d4d696e6553797374656d5d2043616e6e6f7420636c6160448201527f696d2066726f6d206d696e6573206f6e20612074696c6520796f7520646f206e60648201527f6f74206f776e0000000000000000000000000000000000000000000000000000608482015260a401610269565b6001546040517f4f27da180000000000000000000000000000000000000000000000000000000081527f72887d78bbad0f2696fb431d6367da7b429df07154724db7df055e27fb64080f600482015260009173ffffffffffffffffffffffffffffffffffffffff1690634f27da1890602401602060405180830381865afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b91906112d9565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810187905290915073ffffffffffffffffffffffffffffffffffffffff82169063cccf7a8e90602401602060405180830381865afa158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d919061129e565b6105585760408051600060208201520160405160208183030381529060405295505050505050919050565b6001546040517f4f27da180000000000000000000000000000000000000000000000000000000081527fe95fc307e3922a4ed7e1a9d135b2e79aad91e806428d8c7ec9a376dfc8aede5e600482015260009173ffffffffffffffffffffffffffffffffffffffff1690634f27da1890602401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b91906112d9565b6040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810188905290915060009073ffffffffffffffffffffffffffffffffffffffff841690630ff4c91690602401600060405180830381865afa15801561067c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106c291908101906112f6565b905060005b8151811015610a585760006106f58383815181106106e7576106e761139c565b60200260200101518a610e9e565b6001546040517f4f27da180000000000000000000000000000000000000000000000000000000081527f222d9674c2fee077bc82c84232803a9168906e2be25c4560d094c76895b8a432600482015291925073ffffffffffffffffffffffffffffffffffffffff1690634f27da1890602401602060405180830381865afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a891906112d9565b73ffffffffffffffffffffffffffffffffffffffff1663cccf7a8e826040518263ffffffff1660e01b81526004016107e291815260200190565b602060405180830381865afa1580156107ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610823919061129e565b156109be57600154604080517f0d59332e00000000000000000000000000000000000000000000000000000000815290516108e39273ffffffffffffffffffffffffffffffffffffffff1691630d59332e9160048083019260209291908290030181865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd91906112d9565b7fbfa4e94ac46519bd16654700fe5605b990ceb82f41218bfba1018857ba5e01c0610d5a565b73ffffffffffffffffffffffffffffffffffffffff16636ad0ccab338585815181106109115761091161139c565b60200260200101516040518363ffffffff1660e01b815260040161095792919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6000604051808303816000875af1158015610976573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109bc91908101906113cb565b505b6040517f1ab06ee50000000000000000000000000000000000000000000000000000000081526004810182905243602482015273ffffffffffffffffffffffffffffffffffffffff851690631ab06ee590604401600060405180830381600087803b158015610a2c57600080fd5b505af1158015610a40573d6000803e3d6000fd5b50505050508080610a5090611442565b9150506106c7565b50604080516000602082015201604051602081830303815290604052975050505050505050919050565b6060610ad382604051602001610abf91906000606082019050825160030b8252602083015160030b60208301526040830151604083015292915050565b6040516020818303038152906040526100cf565b92915050565b6000610b197f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff163314610b8e576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b9781610ef3565b50565b600080548190610be09073ffffffffffffffffffffffffffffffffffffffff167faf90be6cd7aa92d6569a9ae629178b74e1b0fbdd1097c27ec1dfffd2dc4c7540610d5a565b90506000610c236040518060400160405280600d81526020017f6275696c64696e672e74696c650000000000000000000000000000000000000081525085610efc565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff83169063cccf7a8e90602401602060405180830381865afa158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb5919061129e565b610cc3575060009392505050565b6040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff831690630ff4c91690602401602060405180830381865afa158015610d2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5291906112c0565b949350505050565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa158015610dca573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e1091908101906112f6565b90508051600003610e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f7420726567697374657265640000000000000000000000000000006044820152606401610269565b610d5281600081518110610e9357610e9361139c565b602002602001015190565b60408051602081018490529081018290526000906060015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b610b9781610f21565b600082826000015183602001518460400151604051602001610eb694939291906114a1565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405173ffffffffffffffffffffffffffffffffffffffff8481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561101f5761101f610fcd565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561106c5761106c610fcd565b604052919050565b600067ffffffffffffffff82111561108e5761108e610fcd565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000602082840312156110cc57600080fd5b813567ffffffffffffffff8111156110e357600080fd5b8201601f810184136110f457600080fd5b803561110761110282611074565b611025565b81815285602083850101111561111c57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b8381101561115557818101518382015260200161113d565b50506000910152565b602081526000825180602084015261117d81604085016020870161113a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b8060030b8114610b9757600080fd5b6000606082840312156111d057600080fd5b6111d8610ffc565b82356111e3816111af565b815260208301356111f3816111af565b60208201526040928301359281019290925250919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b9757600080fd5b60006020828403121561123f57600080fd5b813561124a8161120b565b9392505050565b60006060828403121561126357600080fd5b61126b610ffc565b8251611276816111af565b81526020830151611286816111af565b60208201526040928301519281019290925250919050565b6000602082840312156112b057600080fd5b8151801515811461124a57600080fd5b6000602082840312156112d257600080fd5b5051919050565b6000602082840312156112eb57600080fd5b815161124a8161120b565b6000602080838503121561130957600080fd5b825167ffffffffffffffff8082111561132157600080fd5b818501915085601f83011261133557600080fd5b81518181111561134757611347610fcd565b8060051b9150611358848301611025565b818152918301840191848101908884111561137257600080fd5b938501935b8385101561139057845182529385019390850190611377565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156113dd57600080fd5b815167ffffffffffffffff8111156113f457600080fd5b8201601f8101841361140557600080fd5b805161141361110282611074565b81815285602083850101111561142857600080fd5b61143982602083016020860161113a565b95945050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361149a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600085516114b3818460208a0161113a565b60e095861b9201918252509190921b6004820152600881019190915260280191905056fea2646970667358221220182bb8089c78ffd936c783931e3fc466a34b251cf3c5a68ee591ee75c2abe78b64736f6c63430008130033";

type ClaimFromMineSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimFromMineSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimFromMineSystem__factory extends ContractFactory {
  constructor(...args: ClaimFromMineSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimFromMineSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<ClaimFromMineSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): ClaimFromMineSystem {
    return super.attach(address) as ClaimFromMineSystem;
  }
  override connect(signer: Signer): ClaimFromMineSystem__factory {
    return super.connect(signer) as ClaimFromMineSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimFromMineSystemInterface {
    return new utils.Interface(_abi) as ClaimFromMineSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimFromMineSystem {
    return new Contract(address, _abi, signerOrProvider) as ClaimFromMineSystem;
  }
}
