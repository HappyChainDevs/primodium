/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ClaimFromMineSystem,
  ClaimFromMineSystemInterface,
} from "../ClaimFromMineSystem";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWorld",
        name: "_world",
        type: "address",
      },
      {
        internalType: "address",
        name: "_components",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "args",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int32",
            name: "x",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "y",
            type: "int32",
          },
        ],
        internalType: "struct Coord",
        name: "coord",
        type: "tuple",
      },
    ],
    name: "executeTyped",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162002034380380620020348339810160408190526200003491620001dc565b8181620000413362000149565b6001600160a01b03811615620000585780620000bd565b816001600160a01b031663ba62fbe46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd91906200021b565b600080546001600160a01b039283166001600160a01b0319918216811790925560018054938616938216841790557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a87805482169093179092557ff67304f10c7772c78e439bc5cb07781db345424de8878c18100fdaa64d197a8680549092161790555050505062000242565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046080546040516001600160a01b038481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381168114620001d957600080fd5b50565b60008060408385031215620001f057600080fd5b8251620001fd81620001c3565b60208401519092506200021081620001c3565b809150509250929050565b6000602082840312156200022e57600080fd5b81516200023b81620001c3565b9392505050565b611de280620002526000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806309c5eabe146100515780638da5cb5b1461007a578063cb6cbba7146100a7578063f2fde38b146100ba575b600080fd5b61006461005f366004611989565b6100cf565b6040516100719190611a3c565b60405180910390f35b610082610750565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100646100b5366004611ab7565b610795565b6100cd6100c8366004611af8565b6107de565b005b6040805160808101909152600080546060929081906101249073ffffffffffffffffffffffffffffffffffffffff167f30f1c358b0a577824afcc8e464bcbd763eba254820a547b425765e75cc511f1e61085a565b73ffffffffffffffffffffffffffffffffffffffff908116825260005460209092019161017291167faf90be6cd7aa92d6569a9ae629178b74e1b0fbdd1097c27ec1dfffd2dc4c754061085a565b73ffffffffffffffffffffffffffffffffffffffff90811682526000546020909201916101c091167fe95fc307e3922a4ed7e1a9d135b2e79aad91e806428d8c7ec9a376dfc8aede5e61085a565b73ffffffffffffffffffffffffffffffffffffffff908116825260005460209092019161020e91167f2fc9fa89c3e33fdaa5feead211018b3d0b1d3edd613228f7f320915fddd8d03961085a565b73ffffffffffffffffffffffffffffffffffffffff16815250905060008380602001905181019061023f9190611b2e565b90506000610282826040518060400160405280600881526020017f6275696c64696e670000000000000000000000000000000000000000000000008152506109a6565b83516040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810183905291925073ffffffffffffffffffffffffffffffffffffffff169063cccf7a8e90602401602060405180830381865afa1580156102f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103159190611b63565b6103cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526044602482018190527f5b436c61696d46726f6d4d696e6553797374656d5d2043616e6e6f7420636c61908201527f696d2066726f6d206d696e6573206f6e20616e20656d70747920636f6f72646960648201527f6e61746500000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60208301516040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810183905260009173ffffffffffffffffffffffffffffffffffffffff1690630ff4c91690602401602060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190611b85565b905033811461051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f5b436c61696d46726f6d4d696e6553797374656d5d2043616e6e6f7420636c6160448201527f696d2066726f6d206d696e6573206f6e20612074696c6520796f7520646f206e60648201527f6f74206f776e0000000000000000000000000000000000000000000000000000608482015260a4016103c4565b610528846060015183610a3f565b6105da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604860248201527f5b436c61696d46726f6d4d696e6553797374656d5d2043616e6e6f7420636c6160448201527f696d2066726f6d206d696e6573206f6e20612074696c652077697468207a657260648201527f6f206865616c7468000000000000000000000000000000000000000000000000608482015260a4016103c4565b6000805461061e9073ffffffffffffffffffffffffffffffffffffffff167ffba48a04766694c16713a414735f83be9cb20bbb29b5e18846cc8f151064084561085a565b60008054919250906106669073ffffffffffffffffffffffffffffffffffffffff167fd76fe4a121a9b3538dd84ce7c5dcb89d64902d545f492b90d7d3123d5c4f612561085a565b60008054919250906106ae9073ffffffffffffffffffffffffffffffffffffffff167f9f85518fa78d19707d21ed71beac799d54132f94e1d11ffd9d00557724d9b47f61085a565b60008054919250906106f69073ffffffffffffffffffffffffffffffffffffffff167f28af5d27f505af4c2623e23765f78ddc3a122099072ad9e28ef93b476bccb6c761085a565b90506107268489604001518386866107213373ffffffffffffffffffffffffffffffffffffffff1690565b610b77565b60408051600060208201520160405160208183030381529060405298505050505050505050919050565b60006107907f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60606107d8826040516020016107c491908151600390810b8252602092830151900b9181019190915260400190565b6040516020818303038152906040526100cf565b92915050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f6716804605473ffffffffffffffffffffffffffffffffffffffff16331461084e576040517f2f7a8ee100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085781610df9565b50565b6040517ffbdfa1ea00000000000000000000000000000000000000000000000000000000815260048101829052600090819073ffffffffffffffffffffffffffffffffffffffff85169063fbdfa1ea90602401600060405180830381865afa1580156108ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109109190810190611b9e565b9050805160000361097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6964206e6f74207265676973746572656400000000000000000000000000000060448201526064016103c4565b61099e8160008151811061099357610993611c44565b602002602001015190565b949350505050565b6000826000015160e01b836020015160e01b836109c290611c73565b604080517fffffffff0000000000000000000000000000000000000000000000000000000094851660208201529390921660248401527fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016602883015201604051602081830303815290604052610a3890611cc3565b9392505050565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810182905260009073ffffffffffffffffffffffffffffffffffffffff84169063cccf7a8e90602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190611b63565b610add575060016107d8565b6040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810183905260009073ffffffffffffffffffffffffffffffffffffffff851690630ff4c91690602401602060405180830381865afa158015610b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6f9190611b85565b1190506107d8565b6000610b81610e02565b905060005b6019811015610def576000610bd8838360198110610ba657610ba6611c44565b602002015185604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff87169063cccf7a8e90602401602060405180830381865afa158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a9190611b63565b15610c9457610c94878988888d89898960198110610c8a57610c8a611c44565b60200201516111df565b6000610ca088836114c2565b90508015610ccd57610ccb8a87868660198110610cbf57610cbf611c44565b602002015184896115ee565b505b6040517f1ab06ee50000000000000000000000000000000000000000000000000000000081526004810183905243602482015273ffffffffffffffffffffffffffffffffffffffff8a1690631ab06ee590604401600060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b50506040517f1ab06ee5000000000000000000000000000000000000000000000000000000008152600481018590526000602482015273ffffffffffffffffffffffffffffffffffffffff8b169250631ab06ee59150604401600060405180830381600087803b158015610dc257600080fd5b505af1158015610dd6573d6000803e3d6000fd5b5050505050508080610de790611d37565b915050610b86565b5050505050505050565b61085781611796565b610e0a6118c3565b5060408051610320810182527f3d837ba14aa69d4ce9d10c4792c57f1e6daca62171e4c75025c4420d205804c481527f9182d0838cda5b8b8d04b7fdb048ae0d49c90dd4f4ef46ab0958cf6328dfb2ca60208201527fb533b87fd579e6a4bd7adf53c6573acece50e469a2a3480b5694a32c710af291918101919091527f88897217b7ca352fa62012bfb0aa451ebca6a6ff9208f9698f717331232152a760608201527fae6e54a2162e6ef6bb60a2555b10f3160acb04e5d6181837025ff5cdd9df7ff160808201527f17025afdea42119548a0a5f9ec0cdbdcb19e7a9f4b475913071021a3cdbb5bfd60a08201527f6c4cf968092a55522769ad001f5a4d068bbdc6ea30a7d8f460833f83e9c9727c60c08201527f416cd867e38826680c4261f20f5285dd44a10270a8118bdeec1383c9a089cf0460e08201527ff22d62753c9bef149557affda667bdaa3aff1e69179b0c09e101bfc462bf4fae6101008201527f32c232ca8907667a2c1ce8c69c3cc8ff5db78af1eff931677d8c7e80099fd7ad6101208201527f7deaae6bb7615fd1b4e86953f0141ba774ea3adbdd6e2ee244147bfb86aaace56101408201527fbbf0e151801f18e0d112665520a2c0dc8c9590ce85e2851f7f78de30c4c6d51a6101608201527fec80ff155d880c151528d536ae07261be7e0f0ec79c8853fb5205684633239dc6101808201527f5affe8a57277a7102b0bbaade99cebaf060fa104c6f9b2ef54bc3d0b5009e4636101a08201527f19ddbba09381803c7aefa2731f58c344a8370583a0b53b4213e30ce69a4c85c06101c08201527ff86d50efe05e7dda79c003b5d4de9920855994c36c1e10fc14b46aaa116073c66101e08201527f0c3016c3f177a1aea6cba33a3ccb8e01cef39a514cc6bb0b1223aecdbbbd34926102008201527f86e73de3ac620e292e280fd2df5d7acbc4c214f5d881d6a384e0de3ad7d91cd56102208201527f411675c9d4275dfb3010259013ee279130ee32a3a7d9b6372c9b3a0cf2fe007c6102408201527fd9418932daa63d0584685e5e12e024d763737dd3d7987cba52901bb702a71eba6102608201527fcb4b1a16e996a77db534cc9953e3a609aaf28bd5d6665555df84fa08ffc034656102808201527f91f93424fea36c7a4a1a3de34568499e2122a2870b9f421088a80c2566a347936102a08201527fdf054c8ff646f055efa75559586847c60a9365d45c0aa564f013bf3ad4f3621f6102c08201527feca34f2b0223a68bf924ac6039230f608d3402b84363c664fc8e2dadbef21f9e6102e08201527f4952f11b5e88ffd88b7a0231ee67228cf0d58eb081bf31517c674f44264c783f61030082015290565b604080516020808201849052818301859052825180830384018152606090920190925280519101204361121288836114c2565b0361121d57506114b9565b600061122987836114c2565b9050600081116112c0576040517f1ab06ee50000000000000000000000000000000000000000000000000000000081526004810183905243602482015273ffffffffffffffffffffffffffffffffffffffff891690631ab06ee590604401600060405180830381600087803b1580156112a157600080fd5b505af11580156112b5573d6000803e3d6000fd5b5050505050506114b9565b60006112ce87878787611842565b905060008111611366576040517f1ab06ee50000000000000000000000000000000000000000000000000000000081526004810184905243602482015273ffffffffffffffffffffffffffffffffffffffff8a1690631ab06ee590604401600060405180830381600087803b15801561134657600080fd5b505af115801561135a573d6000803e3d6000fd5b505050505050506114b9565b60006113728a856114c2565b61137c9043611d6f565b6113869084611d82565b6113908c866114c2565b61139a9190611d99565b9050808210156113a75750805b6040517f1ab06ee50000000000000000000000000000000000000000000000000000000081526004810185905243602482015273ffffffffffffffffffffffffffffffffffffffff8b1690631ab06ee590604401600060405180830381600087803b15801561141557600080fd5b505af1158015611429573d6000803e3d6000fd5b50506040517f1ab06ee5000000000000000000000000000000000000000000000000000000008152600481018790526024810184905273ffffffffffffffffffffffffffffffffffffffff8e169250631ab06ee59150604401600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b50505050505050505b50505050505050565b6040517fcccf7a8e0000000000000000000000000000000000000000000000000000000081526004810182905260009073ffffffffffffffffffffffffffffffffffffffff84169063cccf7a8e90602401602060405180830381865afa158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190611b63565b61155f576000610a38565b6040517f0ff4c9160000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff841690630ff4c91690602401602060405180830381865afa1580156115ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a389190611b85565b60408051602080820186905281830184905282518083038401815260609092019092528051910120600090600061162787898689611842565b9050848111156116dc578773ffffffffffffffffffffffffffffffffffffffff16631ab06ee583876116598c876114c2565b6116639190611d99565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b1580156116b957600080fd5b505af11580156116cd573d6000803e3d6000fd5b5050505060009250505061178d565b8773ffffffffffffffffffffffffffffffffffffffff16631ab06ee583836117048c876114c2565b61170e9190611d99565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604401600060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b5050505080856117889190611d6f565b925050505b95945050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f671680460805460405173ffffffffffffffffffffffffffffffffffffffff8481169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080516020808201849052818301859052825180830384018152606090920190925280519101206000906118789085906114c2565b61188386858561188d565b61178d9190611d6f565b6040805160208082018490528183018590528251808303840181526060909201909252805191012060009061099e9085906114c2565b6040518061032001604052806019906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611934576119346118e2565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611981576119816118e2565b604052919050565b6000602080838503121561199c57600080fd5b823567ffffffffffffffff808211156119b457600080fd5b818501915085601f8301126119c857600080fd5b8135818111156119da576119da6118e2565b611a0a847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161193a565b91508082528684828501011115611a2057600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b81811015611a6957858101830151858201604001528201611a4d565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b8060030b811461085757600080fd5b600060408284031215611ac957600080fd5b611ad1611911565b8235611adc81611aa8565b81526020830135611aec81611aa8565b60208201529392505050565b600060208284031215611b0a57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a3857600080fd5b600060408284031215611b4057600080fd5b611b48611911565b8251611b5381611aa8565b81526020830151611aec81611aa8565b600060208284031215611b7557600080fd5b81518015158114610a3857600080fd5b600060208284031215611b9757600080fd5b5051919050565b60006020808385031215611bb157600080fd5b825167ffffffffffffffff80821115611bc957600080fd5b818501915085601f830112611bdd57600080fd5b815181811115611bef57611bef6118e2565b8060051b9150611c0084830161193a565b8181529183018401918481019088841115611c1a57600080fd5b938501935b83851015611c3857845182529385019390850190611c1f565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815160208301517fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000080821693506018831015611cbb5780818460180360031b1b83161693505b505050919050565b80516020808301519190811015611d02577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d6857611d68611d08565b5060010190565b818103818111156107d8576107d8611d08565b80820281158282048414176107d8576107d8611d08565b808201808211156107d8576107d8611d0856fea2646970667358221220ed38ca9ae71767eca9b256bd1747b87da00416f2e95709d5dcb230bb6d72739264736f6c63430008130033";

type ClaimFromMineSystemConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimFromMineSystemConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimFromMineSystem__factory extends ContractFactory {
  constructor(...args: ClaimFromMineSystemConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimFromMineSystem> {
    return super.deploy(
      _world,
      _components,
      overrides || {}
    ) as Promise<ClaimFromMineSystem>;
  }
  override getDeployTransaction(
    _world: PromiseOrValue<string>,
    _components: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_world, _components, overrides || {});
  }
  override attach(address: string): ClaimFromMineSystem {
    return super.attach(address) as ClaimFromMineSystem;
  }
  override connect(signer: Signer): ClaimFromMineSystem__factory {
    return super.connect(signer) as ClaimFromMineSystem__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimFromMineSystemInterface {
    return new utils.Interface(_abi) as ClaimFromMineSystemInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimFromMineSystem {
    return new Contract(address, _abi, signerOrProvider) as ClaimFromMineSystem;
  }
}
