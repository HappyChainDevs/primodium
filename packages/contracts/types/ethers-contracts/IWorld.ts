/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type SystemCallDataStruct = {
  systemId: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
};

export type SystemCallDataStructOutput = [string, string] & {
  systemId: string;
  callData: string;
};

export type SystemCallFromDataStruct = {
  from: PromiseOrValue<string>;
  systemId: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
};

export type SystemCallFromDataStructOutput = [string, string, string] & {
  from: string;
  systemId: string;
  callData: string;
};

export type BattleResultDataStruct = {
  attacker: PromiseOrValue<BytesLike>;
  defender: PromiseOrValue<BytesLike>;
  winner: PromiseOrValue<BytesLike>;
  rock: PromiseOrValue<BytesLike>;
  totalCargo: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
  attackerStartingUnits: PromiseOrValue<BigNumberish>[];
  defenderStartingUnits: PromiseOrValue<BigNumberish>[];
  attackerUnitsLeft: PromiseOrValue<BigNumberish>[];
  defenderUnitsLeft: PromiseOrValue<BigNumberish>[];
};

export type BattleResultDataStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber[]
] & {
  attacker: string;
  defender: string;
  winner: string;
  rock: string;
  totalCargo: BigNumber;
  timestamp: BigNumber;
  attackerStartingUnits: BigNumber[];
  defenderStartingUnits: BigNumber[];
  attackerUnitsLeft: BigNumber[];
  defenderUnitsLeft: BigNumber[];
};

export type PositionDataStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
  parent: PromiseOrValue<BytesLike>;
};

export type PositionDataStructOutput = [number, number, string] & {
  x: number;
  y: number;
  parent: string;
};

export interface IWorldInterface extends utils.Interface {
  functions: {
    "acceptRequestToJoin(bytes32)": FunctionFragment;
    "batchCall((bytes32,bytes)[])": FunctionFragment;
    "batchCallFrom((address,bytes32,bytes)[])": FunctionFragment;
    "battle(bytes32,bytes32,bytes32,uint8)": FunctionFragment;
    "build(uint8,(int32,int32,bytes32))": FunctionFragment;
    "call(bytes32,bytes)": FunctionFragment;
    "callFrom(address,bytes32,bytes)": FunctionFragment;
    "claimObjective(uint8)": FunctionFragment;
    "create(bytes32,uint8)": FunctionFragment;
    "creator()": FunctionFragment;
    "declineInvite(bytes32)": FunctionFragment;
    "deleteRecord(bytes32,bytes32[])": FunctionFragment;
    "destroy((int32,int32,bytes32))": FunctionFragment;
    "devDeleteRecord(bytes32,bytes32[])": FunctionFragment;
    "devPopFromDynamicField(bytes32,bytes32[],uint8,uint256)": FunctionFragment;
    "devPushToDynamicField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "devSetDynamicField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)": FunctionFragment;
    "devSetField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "devSetRecord(bytes32,bytes32[],bytes,bytes32,bytes)": FunctionFragment;
    "devSetStaticField(bytes32,bytes32[],uint8,bytes,bytes32)": FunctionFragment;
    "devSpliceDynamicData(bytes32,bytes32[],uint8,uint40,uint40,bytes)": FunctionFragment;
    "devSpliceStaticData(bytes32,bytes32[],uint48,bytes)": FunctionFragment;
    "getAttackPoints(bytes32,bytes32,uint8)": FunctionFragment;
    "getDynamicField(bytes32,bytes32[],uint8)": FunctionFragment;
    "getDynamicFieldLength(bytes32,bytes32[],uint8)": FunctionFragment;
    "getDynamicFieldSlice(bytes32,bytes32[],uint8,uint256,uint256)": FunctionFragment;
    "getField(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getField(bytes32,bytes32[],uint8)": FunctionFragment;
    "getFieldLayout(bytes32)": FunctionFragment;
    "getFieldLength(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getFieldLength(bytes32,bytes32[],uint8)": FunctionFragment;
    "getKeySchema(bytes32)": FunctionFragment;
    "getRecord(bytes32,bytes32[],bytes32)": FunctionFragment;
    "getRecord(bytes32,bytes32[])": FunctionFragment;
    "getStaticField(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getValueSchema(bytes32)": FunctionFragment;
    "grantAccess(bytes32,address)": FunctionFragment;
    "grantRole(bytes32,uint8)": FunctionFragment;
    "increment()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "installModule(address,bytes)": FunctionFragment;
    "installRootModule(address,bytes)": FunctionFragment;
    "invade(bytes32)": FunctionFragment;
    "invite(bytes32)": FunctionFragment;
    "join(bytes32)": FunctionFragment;
    "kick(bytes32)": FunctionFragment;
    "leave()": FunctionFragment;
    "moveBuilding((int32,int32,bytes32),(int32,int32,bytes32))": FunctionFragment;
    "popFromDynamicField(bytes32,bytes32[],uint8,uint256)": FunctionFragment;
    "pushToDynamicField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "raid(bytes32)": FunctionFragment;
    "recallAll(bytes32)": FunctionFragment;
    "recallAllOfSendType(bytes32,uint8)": FunctionFragment;
    "recallArrival(bytes32,bytes32)": FunctionFragment;
    "recallStationedUnits(bytes32)": FunctionFragment;
    "registerDelegation(address,bytes32,bytes)": FunctionFragment;
    "registerFunctionSelector(bytes32,string)": FunctionFragment;
    "registerNamespace(bytes32)": FunctionFragment;
    "registerNamespaceDelegation(bytes32,bytes32,bytes)": FunctionFragment;
    "registerRootFunctionSelector(bytes32,string,bytes4)": FunctionFragment;
    "registerStoreHook(bytes32,address,uint8)": FunctionFragment;
    "registerSystem(bytes32,address,bool)": FunctionFragment;
    "registerSystemHook(bytes32,address,uint8)": FunctionFragment;
    "registerTable(bytes32,bytes32,bytes32,bytes32,string[],string[])": FunctionFragment;
    "reinforce(bytes32,bytes32)": FunctionFragment;
    "rejectRequestToJoin(bytes32)": FunctionFragment;
    "requestToJoin(bytes32)": FunctionFragment;
    "revokeAccess(bytes32,address)": FunctionFragment;
    "revokeInvite(bytes32)": FunctionFragment;
    "sendUnits(uint256[7],uint8,(int32,int32,bytes32),(int32,int32,bytes32),bytes32)": FunctionFragment;
    "setDynamicField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "setField(bytes32,bytes32[],uint8,bytes)": FunctionFragment;
    "setField(bytes32,bytes32[],uint8,bytes,bytes32)": FunctionFragment;
    "setRecord(bytes32,bytes32[],bytes,bytes32,bytes)": FunctionFragment;
    "setStaticField(bytes32,bytes32[],uint8,bytes,bytes32)": FunctionFragment;
    "spawn()": FunctionFragment;
    "spawnPirateAsteroid(bytes32)": FunctionFragment;
    "spliceDynamicData(bytes32,bytes32[],uint8,uint40,uint40,bytes)": FunctionFragment;
    "spliceStaticData(bytes32,bytes32[],uint48,bytes)": FunctionFragment;
    "storeVersion()": FunctionFragment;
    "trainUnits(bytes32,uint8,uint256)": FunctionFragment;
    "transferBalanceToAddress(bytes32,address,uint256)": FunctionFragment;
    "transferBalanceToNamespace(bytes32,bytes32,uint256)": FunctionFragment;
    "transferOwnership(bytes32,address)": FunctionFragment;
    "unregisterStoreHook(bytes32,address)": FunctionFragment;
    "unregisterSystemHook(bytes32,address)": FunctionFragment;
    "updateUnitsAfterBattle((bytes32,bytes32,bytes32,bytes32,uint256,uint256,uint256[],uint256[],uint256[],uint256[]),uint8)": FunctionFragment;
    "upgradeBuilding((int32,int32,bytes32))": FunctionFragment;
    "upgradeRange()": FunctionFragment;
    "upgradeUnit(uint8)": FunctionFragment;
    "worldVersion()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptRequestToJoin"
      | "batchCall"
      | "batchCallFrom"
      | "battle"
      | "build"
      | "call"
      | "callFrom"
      | "claimObjective"
      | "create"
      | "creator"
      | "declineInvite"
      | "deleteRecord"
      | "destroy"
      | "devDeleteRecord"
      | "devPopFromDynamicField"
      | "devPushToDynamicField"
      | "devSetDynamicField"
      | "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)"
      | "devSetField(bytes32,bytes32[],uint8,bytes)"
      | "devSetRecord"
      | "devSetStaticField"
      | "devSpliceDynamicData"
      | "devSpliceStaticData"
      | "getAttackPoints"
      | "getDynamicField"
      | "getDynamicFieldLength"
      | "getDynamicFieldSlice"
      | "getField(bytes32,bytes32[],uint8,bytes32)"
      | "getField(bytes32,bytes32[],uint8)"
      | "getFieldLayout"
      | "getFieldLength(bytes32,bytes32[],uint8,bytes32)"
      | "getFieldLength(bytes32,bytes32[],uint8)"
      | "getKeySchema"
      | "getRecord(bytes32,bytes32[],bytes32)"
      | "getRecord(bytes32,bytes32[])"
      | "getStaticField"
      | "getValueSchema"
      | "grantAccess"
      | "grantRole"
      | "increment"
      | "initialize"
      | "installModule"
      | "installRootModule"
      | "invade"
      | "invite"
      | "join"
      | "kick"
      | "leave"
      | "moveBuilding"
      | "popFromDynamicField"
      | "pushToDynamicField"
      | "raid"
      | "recallAll"
      | "recallAllOfSendType"
      | "recallArrival"
      | "recallStationedUnits"
      | "registerDelegation"
      | "registerFunctionSelector"
      | "registerNamespace"
      | "registerNamespaceDelegation"
      | "registerRootFunctionSelector"
      | "registerStoreHook"
      | "registerSystem"
      | "registerSystemHook"
      | "registerTable"
      | "reinforce"
      | "rejectRequestToJoin"
      | "requestToJoin"
      | "revokeAccess"
      | "revokeInvite"
      | "sendUnits"
      | "setDynamicField"
      | "setField(bytes32,bytes32[],uint8,bytes)"
      | "setField(bytes32,bytes32[],uint8,bytes,bytes32)"
      | "setRecord"
      | "setStaticField"
      | "spawn"
      | "spawnPirateAsteroid"
      | "spliceDynamicData"
      | "spliceStaticData"
      | "storeVersion"
      | "trainUnits"
      | "transferBalanceToAddress"
      | "transferBalanceToNamespace"
      | "transferOwnership"
      | "unregisterStoreHook"
      | "unregisterSystemHook"
      | "updateUnitsAfterBattle"
      | "upgradeBuilding"
      | "upgradeRange"
      | "upgradeUnit"
      | "worldVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptRequestToJoin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCall",
    values: [SystemCallDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCallFrom",
    values: [SystemCallFromDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "battle",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "build",
    values: [PromiseOrValue<BigNumberish>, PositionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "callFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimObjective",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "declineInvite",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRecord",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [PositionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "devDeleteRecord",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "devPopFromDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devPushToDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSetDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSetField(bytes32,bytes32[],uint8,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSetRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSetStaticField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSpliceDynamicData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "devSpliceStaticData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttackPoints",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicFieldLength",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicFieldSlice",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getField(bytes32,bytes32[],uint8,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getField(bytes32,bytes32[],uint8)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLayout",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLength(bytes32,bytes32[],uint8,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLength(bytes32,bytes32[],uint8)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeySchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord(bytes32,bytes32[],bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord(bytes32,bytes32[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueSchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "increment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installRootModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "invade",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "invite",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "join",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moveBuilding",
    values: [PositionDataStruct, PositionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "popFromDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushToDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "raid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recallAll",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recallAllOfSendType",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recallArrival",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recallStationedUnits",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDelegation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFunctionSelector",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNamespace",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNamespaceDelegation",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRootFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStoreHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystem",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystemHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTable",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinforce",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectRequestToJoin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToJoin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInvite",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUnits",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PositionDataStruct,
      PositionDataStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDynamicField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setField(bytes32,bytes32[],uint8,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setField(bytes32,bytes32[],uint8,bytes,bytes32)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaticField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "spawn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spawnPirateAsteroid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "spliceDynamicData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "spliceStaticData",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "storeVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trainUnits",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBalanceToAddress",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBalanceToNamespace",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterStoreHook",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterSystemHook",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnitsAfterBattle",
    values: [BattleResultDataStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeBuilding",
    values: [PositionDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeUnit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "worldVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptRequestToJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCallFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "battle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimObjective",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "declineInvite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devDeleteRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devPopFromDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devPushToDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSetDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSetField(bytes32,bytes32[],uint8,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSetRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSetStaticField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSpliceDynamicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "devSpliceStaticData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttackPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicFieldLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicFieldSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getField(bytes32,bytes32[],uint8,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getField(bytes32,bytes32[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLength(bytes32,bytes32[],uint8,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLength(bytes32,bytes32[],uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeySchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecord(bytes32,bytes32[],bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecord(bytes32,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installRootModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "invade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveBuilding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "popFromDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushToDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recallAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recallAllOfSendType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recallArrival",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recallStationedUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNamespaceDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRootFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStoreHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reinforce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectRequestToJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInvite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendUnits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setField(bytes32,bytes32[],uint8,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setField(bytes32,bytes32[],uint8,bytes,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStaticField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spawn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spawnPirateAsteroid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spliceDynamicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spliceStaticData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trainUnits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBalanceToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBalanceToNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterStoreHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterSystemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnitsAfterBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeBuilding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldVersion",
    data: BytesLike
  ): Result;

  events: {
    "HelloStore(bytes32)": EventFragment;
    "HelloWorld(bytes32)": EventFragment;
    "Store_DeleteRecord(bytes32,bytes32[])": EventFragment;
    "Store_SetRecord(bytes32,bytes32[],bytes,bytes32,bytes)": EventFragment;
    "Store_SpliceDynamicData(bytes32,bytes32[],uint48,uint40,bytes32,bytes)": EventFragment;
    "Store_SpliceStaticData(bytes32,bytes32[],uint48,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HelloStore"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HelloWorld"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Store_DeleteRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Store_SetRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Store_SpliceDynamicData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Store_SpliceStaticData"): EventFragment;
}

export interface HelloStoreEventObject {
  storeVersion: string;
}
export type HelloStoreEvent = TypedEvent<[string], HelloStoreEventObject>;

export type HelloStoreEventFilter = TypedEventFilter<HelloStoreEvent>;

export interface HelloWorldEventObject {
  worldVersion: string;
}
export type HelloWorldEvent = TypedEvent<[string], HelloWorldEventObject>;

export type HelloWorldEventFilter = TypedEventFilter<HelloWorldEvent>;

export interface Store_DeleteRecordEventObject {
  tableId: string;
  keyTuple: string[];
}
export type Store_DeleteRecordEvent = TypedEvent<
  [string, string[]],
  Store_DeleteRecordEventObject
>;

export type Store_DeleteRecordEventFilter =
  TypedEventFilter<Store_DeleteRecordEvent>;

export interface Store_SetRecordEventObject {
  tableId: string;
  keyTuple: string[];
  staticData: string;
  encodedLengths: string;
  dynamicData: string;
}
export type Store_SetRecordEvent = TypedEvent<
  [string, string[], string, string, string],
  Store_SetRecordEventObject
>;

export type Store_SetRecordEventFilter = TypedEventFilter<Store_SetRecordEvent>;

export interface Store_SpliceDynamicDataEventObject {
  tableId: string;
  keyTuple: string[];
  start: number;
  deleteCount: number;
  encodedLengths: string;
  data: string;
}
export type Store_SpliceDynamicDataEvent = TypedEvent<
  [string, string[], number, number, string, string],
  Store_SpliceDynamicDataEventObject
>;

export type Store_SpliceDynamicDataEventFilter =
  TypedEventFilter<Store_SpliceDynamicDataEvent>;

export interface Store_SpliceStaticDataEventObject {
  tableId: string;
  keyTuple: string[];
  start: number;
  data: string;
}
export type Store_SpliceStaticDataEvent = TypedEvent<
  [string, string[], number, string],
  Store_SpliceStaticDataEventObject
>;

export type Store_SpliceStaticDataEventFilter =
  TypedEventFilter<Store_SpliceStaticDataEvent>;

export interface IWorld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWorldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptRequestToJoin(
      accepted: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCall(
      systemCalls: SystemCallDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchCallFrom(
      systemCalls: SystemCallFromDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    battle(
      attackerEntity: PromiseOrValue<BytesLike>,
      defenderEntity: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    build(
      buildingType: PromiseOrValue<BigNumberish>,
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    call(
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callFrom(
      delegator: PromiseOrValue<string>,
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimObjective(
      objective: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    create(
      name: PromiseOrValue<BytesLike>,
      allianceInviteMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    declineInvite(
      inviter: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    destroy(
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devDeleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devPopFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devPushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devSetDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "devSetField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devSetRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devSetStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devSpliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    devSpliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAttackPoints(
      invader: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDynamicFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDynamicFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "getField(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "getField(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getFieldLayout(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { fieldLayout: string }>;

    "getFieldLength(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFieldLength(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKeySchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { keySchema: string }>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        staticData: string;
        encodedLengths: string;
        dynamicData: string;
      }
    >;

    "getRecord(bytes32,bytes32[])"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        staticData: string;
        encodedLengths: string;
        dynamicData: string;
      }
    >;

    getStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getValueSchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { valueSchema: string }>;

    grantAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      target: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      coreModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invade(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invite(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    join(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kick(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moveBuilding(
      fromCoord: PositionDataStruct,
      toCoord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    popFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    raid(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recallAll(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recallAllOfSendType(
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recallArrival(
      rockEntity: PromiseOrValue<BytesLike>,
      arrivalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recallStationedUnits(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDelegation(
      delegatee: PromiseOrValue<string>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      systemFunctionSignature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNamespace(
      namespaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNamespaceDelegation(
      namespaceId: PromiseOrValue<BytesLike>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRootFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      worldFunctionSignature: PromiseOrValue<string>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystem(
      systemId: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTable(
      tableId: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reinforce(
      rockEntity: PromiseOrValue<BytesLike>,
      arrival: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectRequestToJoin(
      rejectee: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestToJoin(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeInvite(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendUnits(
      unitCounts: PromiseOrValue<BigNumberish>[],
      sendType: PromiseOrValue<BigNumberish>,
      origin: PositionDataStruct,
      destination: PositionDataStruct,
      to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spawn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spawnPirateAsteroid(
      prototypeEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    storeVersion(
      overrides?: CallOverrides
    ): Promise<[string] & { version: string }>;

    trainUnits(
      buildingEntity: PromiseOrValue<BytesLike>,
      unit: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferBalanceToAddress(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferBalanceToNamespace(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toNamespaceId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      namespaceId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUnitsAfterBattle(
      br: BattleResultDataStruct,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeBuilding(
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeRange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeUnit(
      unit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    worldVersion(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptRequestToJoin(
    accepted: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCall(
    systemCalls: SystemCallDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchCallFrom(
    systemCalls: SystemCallFromDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  battle(
    attackerEntity: PromiseOrValue<BytesLike>,
    defenderEntity: PromiseOrValue<BytesLike>,
    rockEntity: PromiseOrValue<BytesLike>,
    sendType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  build(
    buildingType: PromiseOrValue<BigNumberish>,
    coord: PositionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  call(
    systemId: PromiseOrValue<BytesLike>,
    callData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callFrom(
    delegator: PromiseOrValue<string>,
    systemId: PromiseOrValue<BytesLike>,
    callData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimObjective(
    objective: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  create(
    name: PromiseOrValue<BytesLike>,
    allianceInviteMode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  declineInvite(
    inviter: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteRecord(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  destroy(
    coord: PositionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devDeleteRecord(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devPopFromDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    byteLengthToPop: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devPushToDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    dataToPush: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devSetDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "devSetField(bytes32,bytes32[],uint8,bytes)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devSetRecord(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    staticData: PromiseOrValue<BytesLike>,
    encodedLengths: PromiseOrValue<BytesLike>,
    dynamicData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devSetStaticField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devSpliceDynamicData(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    startWithinField: PromiseOrValue<BigNumberish>,
    deleteCount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  devSpliceStaticData(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    start: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAttackPoints(
    invader: PromiseOrValue<BytesLike>,
    rockEntity: PromiseOrValue<BytesLike>,
    sendType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDynamicFieldLength(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDynamicFieldSlice(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getField(bytes32,bytes32[],uint8,bytes32)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getField(bytes32,bytes32[],uint8)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFieldLayout(
    tableId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getFieldLength(bytes32,bytes32[],uint8,bytes32)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFieldLength(bytes32,bytes32[],uint8)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKeySchema(
    tableId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRecord(bytes32,bytes32[],bytes32)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      staticData: string;
      encodedLengths: string;
      dynamicData: string;
    }
  >;

  "getRecord(bytes32,bytes32[])"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      staticData: string;
      encodedLengths: string;
      dynamicData: string;
    }
  >;

  getStaticField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getValueSchema(
    tableId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantAccess(
    resourceId: PromiseOrValue<BytesLike>,
    grantee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    target: PromiseOrValue<BytesLike>,
    role: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increment(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    coreModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installModule(
    module: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installRootModule(
    module: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invade(
    rockEntity: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invite(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  join(
    alliance: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kick(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leave(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moveBuilding(
    fromCoord: PositionDataStruct,
    toCoord: PositionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  popFromDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    byteLengthToPop: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushToDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    dataToPush: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  raid(
    rockEntity: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recallAll(
    rockEntity: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recallAllOfSendType(
    rockEntity: PromiseOrValue<BytesLike>,
    sendType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recallArrival(
    rockEntity: PromiseOrValue<BytesLike>,
    arrivalId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recallStationedUnits(
    rockEntity: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDelegation(
    delegatee: PromiseOrValue<string>,
    delegationControlId: PromiseOrValue<BytesLike>,
    initCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerFunctionSelector(
    systemId: PromiseOrValue<BytesLike>,
    systemFunctionSignature: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNamespace(
    namespaceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNamespaceDelegation(
    namespaceId: PromiseOrValue<BytesLike>,
    delegationControlId: PromiseOrValue<BytesLike>,
    initCallData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRootFunctionSelector(
    systemId: PromiseOrValue<BytesLike>,
    worldFunctionSignature: PromiseOrValue<string>,
    systemFunctionSelector: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerStoreHook(
    tableId: PromiseOrValue<BytesLike>,
    hookAddress: PromiseOrValue<string>,
    enabledHooksBitmap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystem(
    systemId: PromiseOrValue<BytesLike>,
    system: PromiseOrValue<string>,
    publicAccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystemHook(
    systemId: PromiseOrValue<BytesLike>,
    hookAddress: PromiseOrValue<string>,
    enabledHooksBitmap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTable(
    tableId: PromiseOrValue<BytesLike>,
    fieldLayout: PromiseOrValue<BytesLike>,
    keySchema: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    keyNames: PromiseOrValue<string>[],
    fieldNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reinforce(
    rockEntity: PromiseOrValue<BytesLike>,
    arrival: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectRequestToJoin(
    rejectee: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestToJoin(
    alliance: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAccess(
    resourceId: PromiseOrValue<BytesLike>,
    grantee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeInvite(
    target: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendUnits(
    unitCounts: PromiseOrValue<BigNumberish>[],
    sendType: PromiseOrValue<BigNumberish>,
    origin: PositionDataStruct,
    destination: PositionDataStruct,
    to: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDynamicField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setField(bytes32,bytes32[],uint8,bytes)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setField(bytes32,bytes32[],uint8,bytes,bytes32)"(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecord(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    staticData: PromiseOrValue<BytesLike>,
    encodedLengths: PromiseOrValue<BytesLike>,
    dynamicData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStaticField(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    fieldIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    fieldLayout: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spawn(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spawnPirateAsteroid(
    prototypeEntity: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spliceDynamicData(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    dynamicFieldIndex: PromiseOrValue<BigNumberish>,
    startWithinField: PromiseOrValue<BigNumberish>,
    deleteCount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spliceStaticData(
    tableId: PromiseOrValue<BytesLike>,
    keyTuple: PromiseOrValue<BytesLike>[],
    start: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  storeVersion(overrides?: CallOverrides): Promise<string>;

  trainUnits(
    buildingEntity: PromiseOrValue<BytesLike>,
    unit: PromiseOrValue<BigNumberish>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferBalanceToAddress(
    fromNamespaceId: PromiseOrValue<BytesLike>,
    toAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferBalanceToNamespace(
    fromNamespaceId: PromiseOrValue<BytesLike>,
    toNamespaceId: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    namespaceId: PromiseOrValue<BytesLike>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterStoreHook(
    tableId: PromiseOrValue<BytesLike>,
    hookAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterSystemHook(
    systemId: PromiseOrValue<BytesLike>,
    hookAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUnitsAfterBattle(
    br: BattleResultDataStruct,
    sendType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeBuilding(
    coord: PositionDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeRange(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeUnit(
    unit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  worldVersion(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptRequestToJoin(
      accepted: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchCall(
      systemCalls: SystemCallDataStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    batchCallFrom(
      systemCalls: SystemCallFromDataStruct[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    battle(
      attackerEntity: PromiseOrValue<BytesLike>,
      defenderEntity: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BattleResultDataStructOutput>;

    build(
      buildingType: PromiseOrValue<BigNumberish>,
      coord: PositionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    call(
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    callFrom(
      delegator: PromiseOrValue<string>,
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    claimObjective(
      objective: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      name: PromiseOrValue<BytesLike>,
      allianceInviteMode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    creator(overrides?: CallOverrides): Promise<string>;

    declineInvite(
      inviter: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    destroy(
      coord: PositionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    devDeleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    devPopFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    devPushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    devSetDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "devSetField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    devSetRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    devSetStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    devSpliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    devSpliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAttackPoints(
      invader: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber, BigNumber]>;

    getDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDynamicFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDynamicFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getField(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getField(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFieldLayout(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getFieldLength(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFieldLength(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeySchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        staticData: string;
        encodedLengths: string;
        dynamicData: string;
      }
    >;

    "getRecord(bytes32,bytes32[])"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        staticData: string;
        encodedLengths: string;
        dynamicData: string;
      }
    >;

    getStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getValueSchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      target: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increment(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      coreModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    invade(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    invite(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    join(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    kick(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    leave(overrides?: CallOverrides): Promise<void>;

    moveBuilding(
      fromCoord: PositionDataStruct,
      toCoord: PositionDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    popFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    raid(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recallAll(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recallAllOfSendType(
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recallArrival(
      rockEntity: PromiseOrValue<BytesLike>,
      arrivalId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recallStationedUnits(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDelegation(
      delegatee: PromiseOrValue<string>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      systemFunctionSignature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerNamespace(
      namespaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNamespaceDelegation(
      namespaceId: PromiseOrValue<BytesLike>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRootFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      worldFunctionSignature: PromiseOrValue<string>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystem(
      systemId: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTable(
      tableId: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    reinforce(
      rockEntity: PromiseOrValue<BytesLike>,
      arrival: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectRequestToJoin(
      rejectee: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestToJoin(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeInvite(
      target: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendUnits(
      unitCounts: PromiseOrValue<BigNumberish>[],
      sendType: PromiseOrValue<BigNumberish>,
      origin: PositionDataStruct,
      destination: PositionDataStruct,
      to: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    spawn(overrides?: CallOverrides): Promise<string>;

    spawnPirateAsteroid(
      prototypeEntity: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    spliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    spliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    storeVersion(overrides?: CallOverrides): Promise<string>;

    trainUnits(
      buildingEntity: PromiseOrValue<BytesLike>,
      unit: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBalanceToAddress(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferBalanceToNamespace(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toNamespaceId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      namespaceId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnitsAfterBattle(
      br: BattleResultDataStruct,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeBuilding(
      coord: PositionDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    upgradeRange(overrides?: CallOverrides): Promise<void>;

    upgradeUnit(
      unit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    worldVersion(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "HelloStore(bytes32)"(
      storeVersion?: PromiseOrValue<BytesLike> | null
    ): HelloStoreEventFilter;
    HelloStore(
      storeVersion?: PromiseOrValue<BytesLike> | null
    ): HelloStoreEventFilter;

    "HelloWorld(bytes32)"(
      worldVersion?: PromiseOrValue<BytesLike> | null
    ): HelloWorldEventFilter;
    HelloWorld(
      worldVersion?: PromiseOrValue<BytesLike> | null
    ): HelloWorldEventFilter;

    "Store_DeleteRecord(bytes32,bytes32[])"(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null
    ): Store_DeleteRecordEventFilter;
    Store_DeleteRecord(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null
    ): Store_DeleteRecordEventFilter;

    "Store_SetRecord(bytes32,bytes32[],bytes,bytes32,bytes)"(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null,
      staticData?: null,
      encodedLengths?: null,
      dynamicData?: null
    ): Store_SetRecordEventFilter;
    Store_SetRecord(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null,
      staticData?: null,
      encodedLengths?: null,
      dynamicData?: null
    ): Store_SetRecordEventFilter;

    "Store_SpliceDynamicData(bytes32,bytes32[],uint48,uint40,bytes32,bytes)"(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null,
      start?: null,
      deleteCount?: null,
      encodedLengths?: null,
      data?: null
    ): Store_SpliceDynamicDataEventFilter;
    Store_SpliceDynamicData(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null,
      start?: null,
      deleteCount?: null,
      encodedLengths?: null,
      data?: null
    ): Store_SpliceDynamicDataEventFilter;

    "Store_SpliceStaticData(bytes32,bytes32[],uint48,bytes)"(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null,
      start?: null,
      data?: null
    ): Store_SpliceStaticDataEventFilter;
    Store_SpliceStaticData(
      tableId?: PromiseOrValue<BytesLike> | null,
      keyTuple?: null,
      start?: null,
      data?: null
    ): Store_SpliceStaticDataEventFilter;
  };

  estimateGas: {
    acceptRequestToJoin(
      accepted: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCall(
      systemCalls: SystemCallDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchCallFrom(
      systemCalls: SystemCallFromDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    battle(
      attackerEntity: PromiseOrValue<BytesLike>,
      defenderEntity: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    build(
      buildingType: PromiseOrValue<BigNumberish>,
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    call(
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callFrom(
      delegator: PromiseOrValue<string>,
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimObjective(
      objective: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    create(
      name: PromiseOrValue<BytesLike>,
      allianceInviteMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    declineInvite(
      inviter: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    destroy(
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devDeleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devPopFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devPushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devSetDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "devSetField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devSetRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devSetStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devSpliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    devSpliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAttackPoints(
      invader: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDynamicFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDynamicFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getField(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getField(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldLayout(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFieldLength(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFieldLength(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeySchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRecord(bytes32,bytes32[])"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueSchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      target: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      coreModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invade(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invite(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    join(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kick(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moveBuilding(
      fromCoord: PositionDataStruct,
      toCoord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    popFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    raid(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recallAll(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recallAllOfSendType(
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recallArrival(
      rockEntity: PromiseOrValue<BytesLike>,
      arrivalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recallStationedUnits(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDelegation(
      delegatee: PromiseOrValue<string>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      systemFunctionSignature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNamespace(
      namespaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNamespaceDelegation(
      namespaceId: PromiseOrValue<BytesLike>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRootFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      worldFunctionSignature: PromiseOrValue<string>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystem(
      systemId: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTable(
      tableId: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reinforce(
      rockEntity: PromiseOrValue<BytesLike>,
      arrival: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectRequestToJoin(
      rejectee: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestToJoin(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeInvite(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendUnits(
      unitCounts: PromiseOrValue<BigNumberish>[],
      sendType: PromiseOrValue<BigNumberish>,
      origin: PositionDataStruct,
      destination: PositionDataStruct,
      to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spawn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spawnPirateAsteroid(
      prototypeEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    storeVersion(overrides?: CallOverrides): Promise<BigNumber>;

    trainUnits(
      buildingEntity: PromiseOrValue<BytesLike>,
      unit: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferBalanceToAddress(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferBalanceToNamespace(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toNamespaceId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      namespaceId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUnitsAfterBattle(
      br: BattleResultDataStruct,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeBuilding(
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeRange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeUnit(
      unit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    worldVersion(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRequestToJoin(
      accepted: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCall(
      systemCalls: SystemCallDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchCallFrom(
      systemCalls: SystemCallFromDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    battle(
      attackerEntity: PromiseOrValue<BytesLike>,
      defenderEntity: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    build(
      buildingType: PromiseOrValue<BigNumberish>,
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    call(
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callFrom(
      delegator: PromiseOrValue<string>,
      systemId: PromiseOrValue<BytesLike>,
      callData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimObjective(
      objective: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    create(
      name: PromiseOrValue<BytesLike>,
      allianceInviteMode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    declineInvite(
      inviter: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devDeleteRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devPopFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devPushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devSetDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "devSetField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "devSetField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devSetRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devSetStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devSpliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    devSpliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAttackPoints(
      invader: PromiseOrValue<BytesLike>,
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDynamicFieldLength(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDynamicFieldSlice(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getField(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getField(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldLayout(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFieldLength(bytes32,bytes32[],uint8,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFieldLength(bytes32,bytes32[],uint8)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeySchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(bytes32,bytes32[],bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRecord(bytes32,bytes32[])"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueSchema(
      tableId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      target: PromiseOrValue<BytesLike>,
      role: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      coreModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invade(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invite(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    join(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kick(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moveBuilding(
      fromCoord: PositionDataStruct,
      toCoord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    popFromDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushToDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    raid(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recallAll(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recallAllOfSendType(
      rockEntity: PromiseOrValue<BytesLike>,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recallArrival(
      rockEntity: PromiseOrValue<BytesLike>,
      arrivalId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recallStationedUnits(
      rockEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDelegation(
      delegatee: PromiseOrValue<string>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      systemFunctionSignature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNamespace(
      namespaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNamespaceDelegation(
      namespaceId: PromiseOrValue<BytesLike>,
      delegationControlId: PromiseOrValue<BytesLike>,
      initCallData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRootFunctionSelector(
      systemId: PromiseOrValue<BytesLike>,
      worldFunctionSignature: PromiseOrValue<string>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystem(
      systemId: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      enabledHooksBitmap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTable(
      tableId: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reinforce(
      rockEntity: PromiseOrValue<BytesLike>,
      arrival: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectRequestToJoin(
      rejectee: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestToJoin(
      alliance: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAccess(
      resourceId: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeInvite(
      target: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendUnits(
      unitCounts: PromiseOrValue<BigNumberish>[],
      sendType: PromiseOrValue<BigNumberish>,
      origin: PositionDataStruct,
      destination: PositionDataStruct,
      to: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDynamicField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setField(bytes32,bytes32[],uint8,bytes)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setField(bytes32,bytes32[],uint8,bytes,bytes32)"(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecord(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      staticData: PromiseOrValue<BytesLike>,
      encodedLengths: PromiseOrValue<BytesLike>,
      dynamicData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStaticField(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      fieldIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      fieldLayout: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spawn(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spawnPirateAsteroid(
      prototypeEntity: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spliceDynamicData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      dynamicFieldIndex: PromiseOrValue<BigNumberish>,
      startWithinField: PromiseOrValue<BigNumberish>,
      deleteCount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spliceStaticData(
      tableId: PromiseOrValue<BytesLike>,
      keyTuple: PromiseOrValue<BytesLike>[],
      start: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    storeVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trainUnits(
      buildingEntity: PromiseOrValue<BytesLike>,
      unit: PromiseOrValue<BigNumberish>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferBalanceToAddress(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferBalanceToNamespace(
      fromNamespaceId: PromiseOrValue<BytesLike>,
      toNamespaceId: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      namespaceId: PromiseOrValue<BytesLike>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterStoreHook(
      tableId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterSystemHook(
      systemId: PromiseOrValue<BytesLike>,
      hookAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUnitsAfterBattle(
      br: BattleResultDataStruct,
      sendType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeBuilding(
      coord: PositionDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeRange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeUnit(
      unit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    worldVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
