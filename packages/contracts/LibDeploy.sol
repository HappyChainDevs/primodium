// SPDX-License-Identifier: MIT 
pragma solidity >=0.8.0;

// NOTE: This file is autogenerated via `mud codegen-libdeploy` from `deploy.json`. Do not edit manually.

// Foundry
import { DSTest } from "ds-test/test.sol";
import { console } from "forge-std/console.sol";

// Solecs 
import { World } from "solecs/World.sol";
import { Component } from "solecs/Component.sol";
import { getAddressById } from "solecs/utils.sol";
import { IUint256Component } from "solecs/interfaces/IUint256Component.sol";
import { ISystem } from "solecs/interfaces/ISystem.sol";

// Components (requires 'components=...' remapping in project's remappings.txt)
import { CounterComponent, ID as CounterComponentID } from "components/CounterComponent.sol";
import { PositionComponent, ID as PositionComponentID } from "components/PositionComponent.sol";
import { TileComponent, ID as TileComponentID } from "components/TileComponent.sol";
import { OwnedByComponent, ID as OwnedByComponentID } from "components/OwnedByComponent.sol";
import { PathComponent, ID as PathComponentID } from "components/PathComponent.sol";
import { LastBuiltAtComponent, ID as LastBuiltAtComponentID } from "components/LastBuiltAtComponent.sol";
import { LastClaimedAtComponent, ID as LastClaimedAtComponentID } from "components/LastClaimedAtComponent.sol";

// Systems (requires 'systems=...' remapping in project's remappings.txt)
import { IncrementSystem, ID as IncrementSystemID } from "systems/IncrementSystem.sol";
import { BuildSystem, ID as BuildSystemID } from "systems/BuildSystem.sol";
import { DestroySystem, ID as DestroySystemID } from "systems/DestroySystem.sol";
import { BuildPathSystem, ID as BuildPathSystemID } from "systems/BuildPathSystem.sol";
import { DestroyPathSystem, ID as DestroyPathSystemID } from "systems/DestroyPathSystem.sol";
import { ClaimSystem, ID as ClaimSystemID } from "systems/ClaimSystem.sol";

struct DeployResult {
  World world;
  address deployer;
}

library LibDeploy {
  function deploy(
    address _deployer,
    address _world,
    bool _reuseComponents
  ) internal returns (DeployResult memory result) {
    result.deployer = _deployer;

    // ------------------------
    // Deploy 
    // ------------------------

    // Deploy world
    result.world = _world == address(0) ? new World() : World(_world);
    if (_world == address(0)) result.world.init(); // Init if it's a fresh world

    // Deploy components
    if (!_reuseComponents) {
      Component comp;

      console.log("Deploying CounterComponent");
      comp = new CounterComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PositionComponent");
      comp = new PositionComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying TileComponent");
      comp = new TileComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying OwnedByComponent");
      comp = new OwnedByComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying PathComponent");
      comp = new PathComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying LastBuiltAtComponent");
      comp = new LastBuiltAtComponent(address(result.world));
      console.log(address(comp));

      console.log("Deploying LastClaimedAtComponent");
      comp = new LastClaimedAtComponent(address(result.world));
      console.log(address(comp));
    } 
    
    // Deploy systems 
    deploySystems(address(result.world), true);
  }
  
  function authorizeWriter(
    IUint256Component components,
    uint256 componentId,
    address writer
  ) internal {
    Component(getAddressById(components, componentId)).authorizeWriter(writer);
  }
  
  /**
   * Deploy systems to the given world.
   * If `init` flag is set, systems with `initialize` setting in `deploy.json` will be executed.
   */
  function deploySystems(
    address _world,
    bool init
  ) internal {
    World world = World(_world);
    // Deploy systems
    ISystem system; 
    IUint256Component components = world.components();

    console.log("Deploying IncrementSystem");
    system = new IncrementSystem(world, address(components));
    world.registerSystem(address(system), IncrementSystemID);
    authorizeWriter(components, CounterComponentID, address(system));
    console.log(address(system));

    console.log("Deploying BuildSystem");
    system = new BuildSystem(world, address(components));
    world.registerSystem(address(system), BuildSystemID);
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, TileComponentID, address(system));
    authorizeWriter(components, OwnedByComponentID, address(system));
    authorizeWriter(components, LastBuiltAtComponentID, address(system));
    authorizeWriter(components, LastClaimedAtComponentID, address(system));
    console.log(address(system));

    console.log("Deploying DestroySystem");
    system = new DestroySystem(world, address(components));
    world.registerSystem(address(system), DestroySystemID);
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, TileComponentID, address(system));
    authorizeWriter(components, OwnedByComponentID, address(system));
    authorizeWriter(components, LastBuiltAtComponentID, address(system));
    authorizeWriter(components, LastClaimedAtComponentID, address(system));
    console.log(address(system));

    console.log("Deploying BuildPathSystem");
    system = new BuildPathSystem(world, address(components));
    world.registerSystem(address(system), BuildPathSystemID);
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, TileComponentID, address(system));
    authorizeWriter(components, OwnedByComponentID, address(system));
    authorizeWriter(components, PathComponentID, address(system));
    console.log(address(system));

    console.log("Deploying DestroyPathSystem");
    system = new DestroyPathSystem(world, address(components));
    world.registerSystem(address(system), DestroyPathSystemID);
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, TileComponentID, address(system));
    authorizeWriter(components, OwnedByComponentID, address(system));
    authorizeWriter(components, PathComponentID, address(system));
    console.log(address(system));

    console.log("Deploying ClaimSystem");
    system = new ClaimSystem(world, address(components));
    world.registerSystem(address(system), ClaimSystemID);
    authorizeWriter(components, PositionComponentID, address(system));
    authorizeWriter(components, TileComponentID, address(system));
    authorizeWriter(components, OwnedByComponentID, address(system));
    authorizeWriter(components, PathComponentID, address(system));
    authorizeWriter(components, LastBuiltAtComponentID, address(system));
    authorizeWriter(components, LastClaimedAtComponentID, address(system));
    console.log(address(system));
  }
}