/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull web'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/primodium/primodium-testnet2/implementation/web)
 */

import * as amplitude from "@amplitude/analytics-browser";

export type Environment = "prod" | "dev";

export const ApiKey: Record<Environment, string> = {
  prod: "",
  dev: "",
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: "1",
    branch: "main",
    source: "web",
    versionId: "8f0c2168-550a-4531-bc6b-f48fc69bf49e",
  },
  ...{
    ingestionMetadata: {
      sourceName: "browser-typescript-ampli",
      sourceVersion: "2.0.0",
    },
  },
};

export interface LoadOptionsBase {
  disabled?: boolean;
}

export type LoadOptionsWithEnvironment = LoadOptionsBase & {
  environment: Environment;
  client?: { configuration?: BrowserOptions };
};
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: BrowserOptions } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: BrowserClient } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface AccountLinkWalletProperties {
  /**
   * The external (user) address connected to the client to be linked.
   */
  externalAddress: string;
  /**
   * The local (burner) address generated on the client to be linked.
   */
  localAddress: string;
}

export interface SystemAcceptJoinRequestProperties {
  /**
   * Player accepted or invited to an alliance.
   */
  allianceAcceptee: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemAddOrderProperties {
  /**
   * Count of a resource, currently only used in Marketplace events. Logged here with identical scaling displayed in the frontend.
   *
   * ```
   * RESOURCE_SCALE = BigInt(100)
   * scaledCount = BigInt(count) * RESOURCE_SCALE
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  resourceCount: number;
  /**
   * Price of a resource. The raw price is stored in wei units in smart contracts, but logged here with identical scaling displayed in the frontend.
   *
   * ```
   * RESOURCE_SCALE = BigInt(100)
   * scaledPrice = BigInt(Number(price) * 1e18) / RESOURCE_SCALE
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  resourcePrice: number;
  /**
   * Name of a resource in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  resourceType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemBuildProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemBuildPathProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Coordinates at which a path ends or the destination where something is moved to (e.g. a building). The starting coordinates are recorded by the `coord` property.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  endCoord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCancelOrderProperties {
  /**
   * An ID for a Marketplace order. An array of IDs should use the `marketplaceOrderIds` property instead.
   */
  marketplaceOrderId: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimFromMineProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimObjectiveProperties {
  /**
   * Name of an objective in plaintext, as returned by \`BlockIdToKey\` in \`constants.ts\` when passing in an EntityID.
   */
  objectiveType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCraftProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCreateProperties {
  /**
   * Whether an alliance is invite only
   */
  allianceInviteOnly: boolean;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemDeclineInviteProperties {
  /**
   * A player that invites another player to join another alliance.
   */
  allianceInviter: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemDestroyProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  buildingType?: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemDestroyPathProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemGrantRoleProperties {
  /**
   * A member of an alliance that has been granted a role. Currently only used by `system.GrantRole`.
   */
  allianceMember: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * A member role in an alliance that has been granted. Currently only used by `system.GrantRole`. Defined as the following:
   *
   * ```
   * enum EAllianceRole {
   *   Owner = 1, // has all access
   *   CanGrantRole, //can grant roles except the grant role role
   *   CanKick, // can invite and kick members
   *   CanInvite, //can only invite members
   *   Member, // simple member with no special access
   * }
   * ```
   */
  allianceRole: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemIncrementProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currIncrementLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemInvadeProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemInviteProperties {
  /**
   * Player accepted or invited to an alliance.
   */
  allianceAcceptee: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemJoinProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemKickProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * Player rejected or kicked from an alliance.
   */
  allianceRejectee: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemLeaveProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemMoveBuildingProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * Coordinates at which a path ends or the destination where something is moved to (e.g. a building). The starting coordinates are recorded by the `coord` property.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  endCoord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRaidProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRecallArrivalProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRecallReinforcementsProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRecallStationedUnitsProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemReceiveReinforcementProperties {
  /**
   * Index of an arrival transaction passed as an argument.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  arrivalIndex: number;
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRejectJoinRequestProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * Player rejected or kicked from an alliance.
   */
  allianceRejectee: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRequestToJoinProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemResearchProperties {
  /**
   * Name of a research objective in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  researchType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemSendUnitsProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. See `asteroidCoord` for more info.
   */
  destinationAsteroidCoord: string;
  /**
   * Owner of the destination asteroid as specified in the `to` argument for a `system.SendUnits` transaction.
   */
  destinationAsteroidOwner: string;
  /**
   * Enum of the type of a `system.SendUnit` transaction. This is specified in the client as an `ESendType` enum. Defined as the following:
   *
   * ```
   * enum ESendType {
   *   Reinforce = 1,
   *   Invade,
   *   Raid,
   * }
   * ```
   */
  sendType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
  /**
   * Corresponds to the `unitCounts` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  unitTypes: string[];
}

export interface SystemSpawnProperties {
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTakeOrderBulkProperties {
  /**
   * Counts of resources taken from each Marketplace order, currently used in `system.TakeOrderBulk`. Used in conjunction with `marketplaceOrderIds`.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  marketplaceOrderCounts: number[];
  /**
   * An array of Marketplace order IDs, currently used in `system.TakeOrderBulk`. Used in conjunction with `marketplaceOrderCounts`.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  marketplaceOrderIds: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemToggleBuildingProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Initial active status of a building fetched before a system is executed.
   */
  buildingActiveFrom: boolean;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTrainUnitsProperties {
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   *
   * Note that this property is suffixed `Name` instead of `Type` for future provisions for custom names per building. This is otherwise identical to `buildingType` but should only be used in `system.TrainUnits` thus far.
   */
  buildingName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Number of units trained in a transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  unitCount: number;
  /**
   * Name of a unit in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   *
   *
   * Note that this property is suffixed `Name` instead of `Type` for future provisions for custom names per unit.
   */
  unitName: string;
}

export interface SystemUpdateOrderProperties {
  /**
   * An ID for a Marketplace order. An array of IDs should use the `marketplaceOrderIds` property instead.
   */
  marketplaceOrderId: string;
  /**
   * Count of a resource, currently only used in Marketplace events. Logged here with identical scaling displayed in the frontend.
   *
   * ```
   * RESOURCE_SCALE = BigInt(100)
   * scaledCount = BigInt(count) * RESOURCE_SCALE
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  resourceCount: number;
  /**
   * Price of a resource. The raw price is stored in wei units in smart contracts, but logged here with identical scaling displayed in the frontend.
   *
   * ```
   * RESOURCE_SCALE = BigInt(100)
   * scaledPrice = BigInt(Number(price) * 1e18) / RESOURCE_SCALE
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  resourcePrice: number;
  /**
   * Name of a resource in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  resourceType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemUpgradeProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemUpgradeRangeProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Bounds of buildable area on a player's asteroid, represented by \[min.x, min.y, max.x, max.y\].
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 4 |
   * | Max Items | 4 |
   * | Item Type | number |
   *
   * @minItems 4
   * @maxItems 4
   */
  currBounds: [number, number, number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemUpgradeUnitProperties {
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Name of a unit in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   *
   *
   * Note that this property is suffixed `Name` instead of `Type` for future provisions for custom names per unit.
   */
  unitName: string;
}

export class AccountLinkWallet implements BaseEvent {
  event_type = "account.LinkWallet";

  constructor(public event_properties: AccountLinkWalletProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemAcceptJoinRequest implements BaseEvent {
  event_type = "system.AcceptJoinRequest";

  constructor(public event_properties: SystemAcceptJoinRequestProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemAddOrder implements BaseEvent {
  event_type = "system.AddOrder";

  constructor(public event_properties: SystemAddOrderProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemBuild implements BaseEvent {
  event_type = "system.Build";

  constructor(public event_properties: SystemBuildProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemBuildPath implements BaseEvent {
  event_type = "system.BuildPath";

  constructor(public event_properties: SystemBuildPathProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCancelOrder implements BaseEvent {
  event_type = "system.CancelOrder";

  constructor(public event_properties: SystemCancelOrderProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimFromMine implements BaseEvent {
  event_type = "system.ClaimFromMine";

  constructor(public event_properties: SystemClaimFromMineProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimObjective implements BaseEvent {
  event_type = "system.ClaimObjective";

  constructor(public event_properties: SystemClaimObjectiveProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCraft implements BaseEvent {
  event_type = "system.Craft";

  constructor(public event_properties: SystemCraftProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCreate implements BaseEvent {
  event_type = "system.Create";

  constructor(public event_properties: SystemCreateProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemDeclineInvite implements BaseEvent {
  event_type = "system.DeclineInvite";

  constructor(public event_properties: SystemDeclineInviteProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemDestroy implements BaseEvent {
  event_type = "system.Destroy";

  constructor(public event_properties: SystemDestroyProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemDestroyPath implements BaseEvent {
  event_type = "system.DestroyPath";

  constructor(public event_properties: SystemDestroyPathProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemGrantRole implements BaseEvent {
  event_type = "system.GrantRole";

  constructor(public event_properties: SystemGrantRoleProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemIncrement implements BaseEvent {
  event_type = "system.Increment";

  constructor(public event_properties: SystemIncrementProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemInvade implements BaseEvent {
  event_type = "system.Invade";

  constructor(public event_properties: SystemInvadeProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemInvite implements BaseEvent {
  event_type = "system.Invite";

  constructor(public event_properties: SystemInviteProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemJoin implements BaseEvent {
  event_type = "system.Join";

  constructor(public event_properties: SystemJoinProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemKick implements BaseEvent {
  event_type = "system.Kick";

  constructor(public event_properties: SystemKickProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemLeave implements BaseEvent {
  event_type = "system.Leave";

  constructor(public event_properties: SystemLeaveProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemMoveBuilding implements BaseEvent {
  event_type = "system.MoveBuilding";

  constructor(public event_properties: SystemMoveBuildingProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRaid implements BaseEvent {
  event_type = "system.Raid";

  constructor(public event_properties: SystemRaidProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRecallArrival implements BaseEvent {
  event_type = "system.RecallArrival";

  constructor(public event_properties: SystemRecallArrivalProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRecallReinforcements implements BaseEvent {
  event_type = "system.RecallReinforcements";

  constructor(public event_properties: SystemRecallReinforcementsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRecallStationedUnits implements BaseEvent {
  event_type = "system.RecallStationedUnits";

  constructor(public event_properties: SystemRecallStationedUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemReceiveReinforcement implements BaseEvent {
  event_type = "system.ReceiveReinforcement";

  constructor(public event_properties: SystemReceiveReinforcementProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRejectJoinRequest implements BaseEvent {
  event_type = "system.RejectJoinRequest";

  constructor(public event_properties: SystemRejectJoinRequestProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRequestToJoin implements BaseEvent {
  event_type = "system.RequestToJoin";

  constructor(public event_properties: SystemRequestToJoinProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemResearch implements BaseEvent {
  event_type = "system.Research";

  constructor(public event_properties: SystemResearchProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemSendUnits implements BaseEvent {
  event_type = "system.SendUnits";

  constructor(public event_properties: SystemSendUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemSpawn implements BaseEvent {
  event_type = "system.Spawn";

  constructor(public event_properties: SystemSpawnProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTakeOrderBulk implements BaseEvent {
  event_type = "system.TakeOrderBulk";

  constructor(public event_properties: SystemTakeOrderBulkProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemToggleBuilding implements BaseEvent {
  event_type = "system.ToggleBuilding";

  constructor(public event_properties: SystemToggleBuildingProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTrainUnits implements BaseEvent {
  event_type = "system.TrainUnits";

  constructor(public event_properties: SystemTrainUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpdateOrder implements BaseEvent {
  event_type = "system.UpdateOrder";

  constructor(public event_properties: SystemUpdateOrderProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpgrade implements BaseEvent {
  event_type = "system.Upgrade";

  constructor(public event_properties: SystemUpgradeProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpgradeRange implements BaseEvent {
  event_type = "system.UpgradeRange";

  constructor(public event_properties: SystemUpgradeRangeProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpgradeUnit implements BaseEvent {
  event_type = "system.UpgradeUnit";

  constructor(public event_properties: SystemUpgradeUnitProperties) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

 /**
  * Flush the event.
  */
  flush() : PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * account.LinkWallet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/account.LinkWallet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. externalAddress)
   * @param options Amplitude event options.
   */
  accountLinkWallet(
    properties: AccountLinkWalletProperties,
    options?: EventOptions,
  ) {
    return this.track(new AccountLinkWallet(properties), options);
  }

  /**
   * system.AcceptJoinRequest
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.AcceptJoinRequest)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceAcceptee)
   * @param options Amplitude event options.
   */
  systemAcceptJoinRequest(
    properties: SystemAcceptJoinRequestProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemAcceptJoinRequest(properties), options);
  }

  /**
   * system.AddOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.AddOrder)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCount)
   * @param options Amplitude event options.
   */
  systemAddOrder(
    properties: SystemAddOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemAddOrder(properties), options);
  }

  /**
   * system.Build
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Build)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemBuild(
    properties: SystemBuildProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemBuild(properties), options);
  }

  /**
   * system.BuildPath
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.BuildPath)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemBuildPath(
    properties: SystemBuildPathProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemBuildPath(properties), options);
  }

  /**
   * system.CancelOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.CancelOrder)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. marketplaceOrderId)
   * @param options Amplitude event options.
   */
  systemCancelOrder(
    properties: SystemCancelOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCancelOrder(properties), options);
  }

  /**
   * system.ClaimFromMine
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimFromMine)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemClaimFromMine(
    properties: SystemClaimFromMineProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimFromMine(properties), options);
  }

  /**
   * system.ClaimObjective
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimObjective)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. objectiveType)
   * @param options Amplitude event options.
   */
  systemClaimObjective(
    properties: SystemClaimObjectiveProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimObjective(properties), options);
  }

  /**
   * system.Craft
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Craft)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemCraft(
    properties: SystemCraftProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCraft(properties), options);
  }

  /**
   * system.Create
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Create)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceInviteOnly)
   * @param options Amplitude event options.
   */
  systemCreate(
    properties: SystemCreateProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCreate(properties), options);
  }

  /**
   * system.DeclineInvite
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.DeclineInvite)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceInviter)
   * @param options Amplitude event options.
   */
  systemDeclineInvite(
    properties: SystemDeclineInviteProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemDeclineInvite(properties), options);
  }

  /**
   * system.Destroy
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Destroy)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemDestroy(
    properties: SystemDestroyProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemDestroy(properties), options);
  }

  /**
   * system.DestroyPath
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.DestroyPath)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemDestroyPath(
    properties: SystemDestroyPathProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemDestroyPath(properties), options);
  }

  /**
   * system.GrantRole
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.GrantRole)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceMember)
   * @param options Amplitude event options.
   */
  systemGrantRole(
    properties: SystemGrantRoleProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemGrantRole(properties), options);
  }

  /**
   * system.Increment
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Increment)
   *
   * This is a debug system used to test
   *
   * @param properties The event's properties (e.g. currIncrementLevel)
   * @param options Amplitude event options.
   */
  systemIncrement(
    properties: SystemIncrementProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemIncrement(properties), options);
  }

  /**
   * system.Invade
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Invade)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemInvade(
    properties: SystemInvadeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemInvade(properties), options);
  }

  /**
   * system.Invite
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Invite)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceAcceptee)
   * @param options Amplitude event options.
   */
  systemInvite(
    properties: SystemInviteProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemInvite(properties), options);
  }

  /**
   * system.Join
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Join)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemJoin(
    properties: SystemJoinProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemJoin(properties), options);
  }

  /**
   * system.Kick
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Kick)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemKick(
    properties: SystemKickProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemKick(properties), options);
  }

  /**
   * system.Leave
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Leave)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemLeave(
    properties: SystemLeaveProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemLeave(properties), options);
  }

  /**
   * system.MoveBuilding
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.MoveBuilding)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemMoveBuilding(
    properties: SystemMoveBuildingProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemMoveBuilding(properties), options);
  }

  /**
   * system.Raid
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Raid)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRaid(
    properties: SystemRaidProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRaid(properties), options);
  }

  /**
   * system.RecallArrival
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RecallArrival)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRecallArrival(
    properties: SystemRecallArrivalProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRecallArrival(properties), options);
  }

  /**
   * system.RecallReinforcements
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RecallReinforcements)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRecallReinforcements(
    properties: SystemRecallReinforcementsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRecallReinforcements(properties), options);
  }

  /**
   * system.RecallStationedUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RecallStationedUnits)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRecallStationedUnits(
    properties: SystemRecallStationedUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRecallStationedUnits(properties), options);
  }

  /**
   * system.ReceiveReinforcement
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ReceiveReinforcement)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. arrivalIndex)
   * @param options Amplitude event options.
   */
  systemReceiveReinforcement(
    properties: SystemReceiveReinforcementProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemReceiveReinforcement(properties), options);
  }

  /**
   * system.RejectJoinRequest
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RejectJoinRequest)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemRejectJoinRequest(
    properties: SystemRejectJoinRequestProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRejectJoinRequest(properties), options);
  }

  /**
   * system.RequestToJoin
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RequestToJoin)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemRequestToJoin(
    properties: SystemRequestToJoinProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRequestToJoin(properties), options);
  }

  /**
   * system.Research
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Research)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. researchType)
   * @param options Amplitude event options.
   */
  systemResearch(
    properties: SystemResearchProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemResearch(properties), options);
  }

  /**
   * system.SendUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.SendUnits)
   *
   * Sends units from an asteroid to another asteroid.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemSendUnits(
    properties: SystemSendUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemSendUnits(properties), options);
  }

  /**
   * system.Spawn
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Spawn)
   *
   * Spawns an asteroid for a player.
   *
   * @param properties The event's properties (e.g. transactionFrom)
   * @param options Amplitude event options.
   */
  systemSpawn(
    properties: SystemSpawnProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemSpawn(properties), options);
  }

  /**
   * system.TakeOrderBulk
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TakeOrderBulk)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. marketplaceOrderCounts)
   * @param options Amplitude event options.
   */
  systemTakeOrderBulk(
    properties: SystemTakeOrderBulkProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTakeOrderBulk(properties), options);
  }

  /**
   * system.ToggleBuilding
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ToggleBuilding)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemToggleBuilding(
    properties: SystemToggleBuildingProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemToggleBuilding(properties), options);
  }

  /**
   * system.TrainUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TrainUnits)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. buildingName)
   * @param options Amplitude event options.
   */
  systemTrainUnits(
    properties: SystemTrainUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTrainUnits(properties), options);
  }

  /**
   * system.UpdateOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.UpdateOrder)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. marketplaceOrderId)
   * @param options Amplitude event options.
   */
  systemUpdateOrder(
    properties: SystemUpdateOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpdateOrder(properties), options);
  }

  /**
   * system.Upgrade
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Upgrade)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemUpgrade(
    properties: SystemUpgradeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpgrade(properties), options);
  }

  /**
   * system.UpgradeRange
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.UpgradeRange)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemUpgradeRange(
    properties: SystemUpgradeRangeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpgradeRange(properties), options);
  }

  /**
   * system.UpgradeUnit
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.UpgradeUnit)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. currLevel)
   * @param options Amplitude event options.
   */
  systemUpgradeUnit(
    properties: SystemUpgradeUnitProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpgradeUnit(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
