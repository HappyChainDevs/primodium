/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull web'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/primodium/primodium-testnet2/implementation/web)
 */

import * as amplitude from "@amplitude/analytics-browser";

export type Environment = "prod" | "dev";

export const ApiKey: Record<Environment, string> = {
  prod: "",
  dev: "",
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: "1",
    branch: "main",
    source: "web",
    versionId: "8f0c2168-550a-4531-bc6b-f48fc69bf49e",
  },
  ...{
    ingestionMetadata: {
      sourceName: "browser-typescript-ampli",
      sourceVersion: "2.0.0",
    },
  },
};

export interface LoadOptionsBase {
  disabled?: boolean;
}

export type LoadOptionsWithEnvironment = LoadOptionsBase & {
  environment: Environment;
  client?: { configuration?: BrowserOptions };
};
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: BrowserOptions } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: BrowserClient } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface AccountLinkWalletProperties {
  /**
   * The external (user) address connected to the client to be linked.
   */
  externalAddress: string;
  /**
   * The local (burner) address generated on the client to be linked.
   */
  localAddress: string;
}

export interface SystemAbandonAsteroidSystemPrimodiumAbandonAsteroidProperties {
  /**
   * An array of space rock entities represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  spaceRocks: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemAcceptJoinRequestProperties {
  /**
   * Player accepted or invited to an alliance.
   */
  allianceAcceptee: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemAddOrderProperties {
  /**
   * Count of a resource, currently only used in Marketplace events. Logged here with identical scaling displayed in the frontend.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amountIn: number;
  /**
   * Price of a resource. The raw price is stored in wei units in smart contracts, but logged here with identical scaling displayed in the frontend.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  resourcePrice: number;
  /**
   * Name of a resource in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  resourceType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemBuildProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemBuildPathProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Coordinates at which a path ends or the destination where something is moved to (e.g. a building). The starting coordinates are recorded by the `coord` property.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  endCoord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCancelOrderProperties {
  /**
   * An ID for a Marketplace order. An array of IDs should use the `marketplaceOrderIds` property instead.
   */
  marketplaceOrderId: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimFromMineProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimObjectiveProperties {
  /**
   * Name of an objective in plaintext, as returned by \`BlockIdToKey\` in \`constants.ts\` when passing in an EntityID.
   */
  objectiveType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimPrimodiumSystemPrimodiumClaimPrimodiumProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimPrimodiumSystemPrimodiumClaimShardAsteroidPointsProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemClaimUnitsSystemPrimodiumClaimUnitsProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCombatSystemPrimodiumAttackProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCraftProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemCreateProperties {
  /**
   * Whether an alliance is invite only
   */
  allianceInviteOnly: boolean;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemDeclineInviteProperties {
  /**
   * A player that invites another player to join another alliance.
   */
  allianceInviter: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemDestroyProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Regex |  |
   */
  buildingType?: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemDestroyPathProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetClearSystemPrimodiumAbandonFleetProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetClearSystemPrimodiumClearFleetProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetClearSystemPrimodiumClearResourcesProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetClearSystemPrimodiumClearUnitsProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetClearSystemPrimodiumClearUnitsAndResourcesFromFleetProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetCreateSystemPrimodiumCreateFleetProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetLandSystemPrimodiumLandFleetProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetMergeSystemPrimodiumMergeFleetsProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetRecallSystemPrimodiumRecallFleetProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetSendSystemPrimodiumSendFleetProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * Position of a space rock, represented by \[x,y\] as numbers. This property is optional for FleetSendSystem if a space rock entity ID is specified instead.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  spaceRockCoord?: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetStanceSystemPrimodiumClearFleetStanceProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemFleetStanceSystemPrimodiumSetFleetStanceProperties {
  /**
   * An array of fleets represented by their Hex strings.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  fleets: string[];
  /**
   * The stance of a fleet, represented by the following enum:
   *
   * ```
   * export enum EFleetStance {
   *   Follow = 1,
   *   Defend,
   *   Block,
   * }
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  fleetStance: number;
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemGrantRoleProperties {
  /**
   * A member of an alliance that has been granted a role. Currently only used by `system.GrantRole`.
   */
  allianceMember: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * A member role in an alliance that has been granted. Currently only used by `system.GrantRole`. Defined as the following:
   *
   * ```
   * enum EAllianceRole {
   *   Owner = 1, // has all access
   *   CanGrantRole, //can grant roles except the grant role role
   *   CanKick, // can invite and kick members
   *   CanInvite, //can only invite members
   *   Member, // simple member with no special access
   * }
   * ```
   */
  allianceRole: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemIncrementProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currIncrementLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemInvadeProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemInviteProperties {
  /**
   * Player accepted or invited to an alliance.
   */
  allianceAcceptee: string;
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemJoinProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemKickProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * Player rejected or kicked from an alliance.
   */
  allianceRejectee: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemLeaveProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemMoveBuildingProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * Coordinates at which a path ends or the destination where something is moved to (e.g. a building). The starting coordinates are recorded by the `coord` property.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  endCoord: [number, number];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRaidProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRecallArrivalProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRecallReinforcementsProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRecallStationedUnitsProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemReceiveReinforcementProperties {
  /**
   * Index of an arrival transaction passed as an argument.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  arrivalIndex: number;
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRegisterDelegationProperties {
  /**
   * Burner address to be delegated to by an external wallet.
   */
  delegateAddress: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRejectJoinRequestProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * Player rejected or kicked from an alliance.
   */
  allianceRejectee: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemRequestToJoinProperties {
  /**
   * Name of an alliance.
   */
  allianceName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemResearchProperties {
  /**
   * Name of a research objective in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  researchType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemSendUnitsProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. See `asteroidCoord` for more info.
   */
  destinationAsteroidCoord: string;
  /**
   * Owner of the destination asteroid as specified in the `to` argument for a `system.SendUnits` transaction.
   */
  destinationAsteroidOwner: string;
  /**
   * Enum of the type of a `system.SendUnit` transaction. This is specified in the client as an `ESendType` enum. Defined as the following:
   *
   * ```
   * enum ESendType {
   *   Reinforce = 1,
   *   Invade,
   *   Raid,
   * }
   * ```
   */
  sendType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
  /**
   * Corresponds to the `unitCounts` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  unitTypes: string[];
}

export interface SystemSpawnProperties {
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemSwapProperties {
  address: string;
  /**
   * Count of a resource, currently only used in Marketplace events. Logged here with identical scaling displayed in the frontend.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amountIn: number;
  /**
   * Count of a resource, currently only used in Marketplace events. Logged here with identical scaling displayed in the frontend.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amountOut: number;
  /**
   * Resource to be traded in by a marketplace swap. Readable name returned by `getEntityTypeName()`.
   */
  resourceIn: string;
  /**
   * Resource to be traded to by a marketplace swap. Readable name returned by `getEntityTypeName()`.
   */
  resourceOut: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTakeOrderBulkProperties {
  /**
   * Counts of resources taken from each Marketplace order, currently used in `system.TakeOrderBulk`. Used in conjunction with `marketplaceOrderIds`.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  marketplaceOrderCounts: number[];
  /**
   * An array of Marketplace order IDs, currently used in `system.TakeOrderBulk`. Used in conjunction with `marketplaceOrderCounts`.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | string |
   */
  marketplaceOrderIds: string[];
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemToggleBuildingProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Initial active status of a building fetched before a system is executed.
   */
  buildingActiveFrom: boolean;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTrainUnitsProperties {
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   *
   * Note that this property is suffixed `Name` instead of `Type` for future provisions for custom names per building. This is otherwise identical to `buildingType` but should only be used in `system.TrainUnits` thus far.
   */
  buildingName: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Number of units trained in a transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  unitCount: number;
  /**
   * Name of a unit in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   *
   *
   * Note that this property is suffixed `Name` instead of `Type` for future provisions for custom names per unit.
   */
  unitName: string;
}

export interface SystemTransferSystemPrimodiumTransferResourcesFromAsteroidToFleetProperties {
  /**
   * Corresponds to the `resourceTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  resourceCounts: number[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTransferSystemPrimodiumTransferResourcesFromFleetToAsteroidProperties {
  /**
   * Corresponds to the `resourceTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  resourceCounts: number[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTransferSystemPrimodiumTransferResourcesFromFleetToFleetProperties {
  /**
   * Corresponds to the `resourceTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  resourceCounts: number[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromAsteroidToFleetProperties {
  /**
   * Corresponds to the `resourceTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  resourceCounts: number[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
}

export interface SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToAsteroidProperties {
  /**
   * Corresponds to the `resourceTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  resourceCounts: number[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
}

export interface SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToFleetProperties {
  /**
   * Corresponds to the `resourceTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  resourceCounts: number[];
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
}

export interface SystemTransferSystemPrimodiumTransferUnitsFromAsteroidToFleetProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
}

export interface SystemTransferSystemPrimodiumTransferUnitsFromFleetToAsteroidProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
}

export interface SystemTransferSystemPrimodiumTransferUnitsFromFleetToFleetProperties {
  /**
   * A space rock entity represented by its Hex string.
   */
  spaceRock: string;
  /**
   * A space rock entity represented by its Hex string, paired with `spaceRock` as a target for a specific action.
   */
  spaceRockTo: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Corresponds to the `unitTypes` property in the same order.
   *
   * | Rule | Value |
   * |---|---|
   * | Item Type | number |
   */
  unitCounts: number[];
}

export interface SystemUpdateOrderProperties {
  /**
   * Count of a resource, currently only used in Marketplace events. Logged here with identical scaling displayed in the frontend.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  amountIn: number;
  /**
   * An ID for a Marketplace order. An array of IDs should use the `marketplaceOrderIds` property instead.
   */
  marketplaceOrderId: string;
  /**
   * Price of a resource. The raw price is stored in wei units in smart contracts, but logged here with identical scaling displayed in the frontend.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  resourcePrice: number;
  /**
   * Name of a resource in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  resourceType: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemUpgradeProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Name of a building in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   */
  buildingType: string;
  /**
   * Most systems take a coordinate as a parameter and read the specific building and related metadata during contract execution. Even though such metadata (eg building type and level) aren't passed into the system, we fetch them manually and pass them into Amplitude properties for easier analysis.
   *
   * Stored in the format of \[x, y\]. The \[z\] element that represents the asteroid location is stored in `asteroidCoord`.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 2 |
   * | Max Items | 2 |
   * | Item Type | number |
   *
   * @minItems 2
   * @maxItems 2
   */
  coord: [number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemUpgradeRangeProperties {
  /**
   * Location of an asteroid represented as the \[z\] element in the Position component. This is stored as a single string because the asteroid location is greater than the int32 number limit and has type BigNumber in the client.
   */
  asteroidCoord: string;
  /**
   * Bounds of buildable area on a player's asteroid, represented by \[min.x, min.y, max.x, max.y\].
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 4 |
   * | Max Items | 4 |
   * | Item Type | number |
   *
   * @minItems 4
   * @maxItems 4
   */
  currBounds: [number, number, number, number];
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface SystemUpgradeUnitProperties {
  /**
   * Current level of the building being upgraded. If there is a duplicate event, then the user failed to upgrade the building in the previous action. Also refers to the level of building expansion on an asteroid.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  currLevel: number;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
  /**
   * Name of a unit in plaintext, as returned by `BlockIdToKey` in `constants.ts` when passing in an EntityID.
   *
   *
   * Note that this property is suffixed `Name` instead of `Type` for future provisions for custom names per unit.
   */
  unitName: string;
}

export interface TokenMintProperties {
  /**
   * Address to which a token is minted.
   */
  tokenMintTo: string;
  /**
   * Amount of token that is transferred or minted, logged in wei units as a string. This is named `value` in line with the ERC20 standard.
   */
  tokenValue: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export interface TokenTransferProperties {
  /**
   * Address from which a token is transferred.
   */
  tokenTransferTo: string;
  /**
   * Amount of token that is transferred or minted, logged in wei units as a string. This is named `value` in line with the ERC20 standard.
   */
  tokenValue: string;
  /**
   * The address this transaction is from. On Amplitude, this is also tracked as the user's unique account address initilized with  `ampli.from()`.
   */
  transactionFrom?: string;
  /**
   * The amount of gas actually used by this transaction.
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  transactionGasUsed?: number;
  /**
   * The hash of the transaction.
   */
  transactionHash?: string;
  /**
   * The status of a transaction is 1 is successful or 0 if it was reverted. Direcrly read from `receipt.status`, as described in the ethers.js docs (https://docs.ethers.org/v5/api/providers/types/).
   *
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   * | Min Value | 0 |
   * | Max Value | 1 |
   */
  transactionStatus?: number;
  /**
   * The address this transaction is to. This is `null` if the transaction was an init transaction, used to deploy a contract.
   *
   * Since a user will only execute actions on a contract from the frontend, this value will never be null.
   */
  transactionTo?: string;
  /**
   * If the transaction is recorded on-chain and returns a valid receipt with a transaction hash, whether the transaction reverted or not, `transactionValid` will return `true`. Otherwise, it will return `false`.
   *
   *
   * Note that if `transactionValid` is `true`, `transactionStatus` should be checked if a transaction is successful (status 1) or not (status 0).
   */
  transactionValid: boolean;
}

export class AccountLinkWallet implements BaseEvent {
  event_type = "account.LinkWallet";

  constructor(public event_properties: AccountLinkWalletProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemAbandonAsteroidSystemPrimodiumAbandonAsteroid implements BaseEvent {
  event_type = "system.AbandonAsteroidSystem.Primodium__abandonAsteroid";

  constructor(public event_properties: SystemAbandonAsteroidSystemPrimodiumAbandonAsteroidProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemAcceptJoinRequest implements BaseEvent {
  event_type = "system.AcceptJoinRequest";

  constructor(public event_properties: SystemAcceptJoinRequestProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemAddOrder implements BaseEvent {
  event_type = "system.AddOrder";

  constructor(public event_properties: SystemAddOrderProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemBuild implements BaseEvent {
  event_type = "system.Build";

  constructor(public event_properties: SystemBuildProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemBuildPath implements BaseEvent {
  event_type = "system.BuildPath";

  constructor(public event_properties: SystemBuildPathProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCancelOrder implements BaseEvent {
  event_type = "system.CancelOrder";

  constructor(public event_properties: SystemCancelOrderProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimFromMine implements BaseEvent {
  event_type = "system.ClaimFromMine";

  constructor(public event_properties: SystemClaimFromMineProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimObjective implements BaseEvent {
  event_type = "system.ClaimObjective";

  constructor(public event_properties: SystemClaimObjectiveProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimPrimodiumSystemPrimodiumClaimPrimodium implements BaseEvent {
  event_type = "system.ClaimPrimodiumSystem.Primodium__claimPrimodium";

  constructor(public event_properties: SystemClaimPrimodiumSystemPrimodiumClaimPrimodiumProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimPrimodiumSystemPrimodiumClaimShardAsteroidPoints implements BaseEvent {
  event_type = "system.ClaimPrimodiumSystem.Primodium__claimShardAsteroidPoints";

  constructor(public event_properties: SystemClaimPrimodiumSystemPrimodiumClaimShardAsteroidPointsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemClaimUnitsSystemPrimodiumClaimUnits implements BaseEvent {
  event_type = "system.ClaimUnitsSystem.Primodium__claimUnits";

  constructor(public event_properties: SystemClaimUnitsSystemPrimodiumClaimUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCombatSystemPrimodiumAttack implements BaseEvent {
  event_type = "system.CombatSystem.Primodium__attack";

  constructor(public event_properties: SystemCombatSystemPrimodiumAttackProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCraft implements BaseEvent {
  event_type = "system.Craft";

  constructor(public event_properties: SystemCraftProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemCreate implements BaseEvent {
  event_type = "system.Create";

  constructor(public event_properties: SystemCreateProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemDeclineInvite implements BaseEvent {
  event_type = "system.DeclineInvite";

  constructor(public event_properties: SystemDeclineInviteProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemDestroy implements BaseEvent {
  event_type = "system.Destroy";

  constructor(public event_properties: SystemDestroyProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemDestroyPath implements BaseEvent {
  event_type = "system.DestroyPath";

  constructor(public event_properties: SystemDestroyPathProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetClearSystemPrimodiumAbandonFleet implements BaseEvent {
  event_type = "system.FleetClearSystem.Primodium__abandonFleet";

  constructor(public event_properties: SystemFleetClearSystemPrimodiumAbandonFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetClearSystemPrimodiumClearFleet implements BaseEvent {
  event_type = "system.FleetClearSystem.Primodium__clearFleet";

  constructor(public event_properties: SystemFleetClearSystemPrimodiumClearFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetClearSystemPrimodiumClearResources implements BaseEvent {
  event_type = "system.FleetClearSystem.Primodium__clearResources";

  constructor(public event_properties: SystemFleetClearSystemPrimodiumClearResourcesProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetClearSystemPrimodiumClearUnits implements BaseEvent {
  event_type = "system.FleetClearSystem.Primodium__clearUnits";

  constructor(public event_properties: SystemFleetClearSystemPrimodiumClearUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetClearSystemPrimodiumClearUnitsAndResourcesFromFleet implements BaseEvent {
  event_type = "system.FleetClearSystem.Primodium__clearUnitsAndResourcesFromFleet";

  constructor(public event_properties: SystemFleetClearSystemPrimodiumClearUnitsAndResourcesFromFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetCreateSystemPrimodiumCreateFleet implements BaseEvent {
  event_type = "system.FleetCreateSystem.Primodium__createFleet";

  constructor(public event_properties: SystemFleetCreateSystemPrimodiumCreateFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetLandSystemPrimodiumLandFleet implements BaseEvent {
  event_type = "system.FleetLandSystem.Primodium__landFleet";

  constructor(public event_properties: SystemFleetLandSystemPrimodiumLandFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetMergeSystemPrimodiumMergeFleets implements BaseEvent {
  event_type = "system.FleetMergeSystem.Primodium__mergeFleets";

  constructor(public event_properties: SystemFleetMergeSystemPrimodiumMergeFleetsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetRecallSystemPrimodiumRecallFleet implements BaseEvent {
  event_type = "system.FleetRecallSystem.Primodium__recallFleet";

  constructor(public event_properties: SystemFleetRecallSystemPrimodiumRecallFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetSendSystemPrimodiumSendFleet implements BaseEvent {
  event_type = "system.FleetSendSystem.Primodium__sendFleet";

  constructor(public event_properties: SystemFleetSendSystemPrimodiumSendFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetStanceSystemPrimodiumClearFleetStance implements BaseEvent {
  event_type = "system.FleetStanceSystem.Primodium__clearFleetStance";

  constructor(public event_properties: SystemFleetStanceSystemPrimodiumClearFleetStanceProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemFleetStanceSystemPrimodiumSetFleetStance implements BaseEvent {
  event_type = "system.FleetStanceSystem.Primodium__setFleetStance";

  constructor(public event_properties: SystemFleetStanceSystemPrimodiumSetFleetStanceProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemGrantRole implements BaseEvent {
  event_type = "system.GrantRole";

  constructor(public event_properties: SystemGrantRoleProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemIncrement implements BaseEvent {
  event_type = "system.Increment";

  constructor(public event_properties: SystemIncrementProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemInvade implements BaseEvent {
  event_type = "system.Invade";

  constructor(public event_properties: SystemInvadeProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemInvite implements BaseEvent {
  event_type = "system.Invite";

  constructor(public event_properties: SystemInviteProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemJoin implements BaseEvent {
  event_type = "system.Join";

  constructor(public event_properties: SystemJoinProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemKick implements BaseEvent {
  event_type = "system.Kick";

  constructor(public event_properties: SystemKickProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemLeave implements BaseEvent {
  event_type = "system.Leave";

  constructor(public event_properties: SystemLeaveProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemMoveBuilding implements BaseEvent {
  event_type = "system.MoveBuilding";

  constructor(public event_properties: SystemMoveBuildingProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRaid implements BaseEvent {
  event_type = "system.Raid";

  constructor(public event_properties: SystemRaidProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRecallArrival implements BaseEvent {
  event_type = "system.RecallArrival";

  constructor(public event_properties: SystemRecallArrivalProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRecallReinforcements implements BaseEvent {
  event_type = "system.RecallReinforcements";

  constructor(public event_properties: SystemRecallReinforcementsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRecallStationedUnits implements BaseEvent {
  event_type = "system.RecallStationedUnits";

  constructor(public event_properties: SystemRecallStationedUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemReceiveReinforcement implements BaseEvent {
  event_type = "system.ReceiveReinforcement";

  constructor(public event_properties: SystemReceiveReinforcementProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRegisterDelegation implements BaseEvent {
  event_type = "system.RegisterDelegation";

  constructor(public event_properties: SystemRegisterDelegationProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRejectJoinRequest implements BaseEvent {
  event_type = "system.RejectJoinRequest";

  constructor(public event_properties: SystemRejectJoinRequestProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemRequestToJoin implements BaseEvent {
  event_type = "system.RequestToJoin";

  constructor(public event_properties: SystemRequestToJoinProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemResearch implements BaseEvent {
  event_type = "system.Research";

  constructor(public event_properties: SystemResearchProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemSendUnits implements BaseEvent {
  event_type = "system.SendUnits";

  constructor(public event_properties: SystemSendUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemSpawn implements BaseEvent {
  event_type = "system.Spawn";

  constructor(public event_properties: SystemSpawnProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemSwap implements BaseEvent {
  event_type = "system.Swap";

  constructor(public event_properties: SystemSwapProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTakeOrderBulk implements BaseEvent {
  event_type = "system.TakeOrderBulk";

  constructor(public event_properties: SystemTakeOrderBulkProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemToggleBuilding implements BaseEvent {
  event_type = "system.ToggleBuilding";

  constructor(public event_properties: SystemToggleBuildingProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTrainUnits implements BaseEvent {
  event_type = "system.TrainUnits";

  constructor(public event_properties: SystemTrainUnitsProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferResourcesFromAsteroidToFleet implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferResourcesFromAsteroidToFleet";

  constructor(public event_properties: SystemTransferSystemPrimodiumTransferResourcesFromAsteroidToFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferResourcesFromFleetToAsteroid implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferResourcesFromFleetToAsteroid";

  constructor(public event_properties: SystemTransferSystemPrimodiumTransferResourcesFromFleetToAsteroidProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferResourcesFromFleetToFleet implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferResourcesFromFleetToFleet";

  constructor(public event_properties: SystemTransferSystemPrimodiumTransferResourcesFromFleetToFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromAsteroidToFleet implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferUnitsAndResourcesFromAsteroidToFleet";

  constructor(
    public event_properties: SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromAsteroidToFleetProperties
  ) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToAsteroid implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferUnitsAndResourcesFromFleetToAsteroid";

  constructor(
    public event_properties: SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToAsteroidProperties
  ) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToFleet implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferUnitsAndResourcesFromFleetToFleet";

  constructor(
    public event_properties: SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToFleetProperties
  ) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferUnitsFromAsteroidToFleet implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferUnitsFromAsteroidToFleet";

  constructor(public event_properties: SystemTransferSystemPrimodiumTransferUnitsFromAsteroidToFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferUnitsFromFleetToAsteroid implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferUnitsFromFleetToAsteroid";

  constructor(public event_properties: SystemTransferSystemPrimodiumTransferUnitsFromFleetToAsteroidProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemTransferSystemPrimodiumTransferUnitsFromFleetToFleet implements BaseEvent {
  event_type = "system.TransferSystem.Primodium__transferUnitsFromFleetToFleet";

  constructor(public event_properties: SystemTransferSystemPrimodiumTransferUnitsFromFleetToFleetProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpdateOrder implements BaseEvent {
  event_type = "system.UpdateOrder";

  constructor(public event_properties: SystemUpdateOrderProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpgrade implements BaseEvent {
  event_type = "system.Upgrade";

  constructor(public event_properties: SystemUpgradeProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpgradeRange implements BaseEvent {
  event_type = "system.UpgradeRange";

  constructor(public event_properties: SystemUpgradeRangeProperties) {
    this.event_properties = event_properties;
  }
}

export class SystemUpgradeUnit implements BaseEvent {
  event_type = "system.UpgradeUnit";

  constructor(public event_properties: SystemUpgradeUnitProperties) {
    this.event_properties = event_properties;
  }
}

export class TokenMint implements BaseEvent {
  event_type = "token.Mint";

  constructor(public event_properties: TokenMintProperties) {
    this.event_properties = event_properties;
  }
}

export class TokenTransfer implements BaseEvent {
  event_type = "token.Transfer";

  constructor(public event_properties: TokenTransferProperties) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

 /**
  * Flush the event.
  */
  flush() : PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * account.LinkWallet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/account.LinkWallet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. externalAddress)
   * @param options Amplitude event options.
   */
  accountLinkWallet(
    properties: AccountLinkWalletProperties,
    options?: EventOptions,
  ) {
    return this.track(new AccountLinkWallet(properties), options);
  }

  /**
   * system.AbandonAsteroidSystem.Primodium__abandonAsteroid
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.AbandonAsteroidSystem.Primodium__abandonAsteroid)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRocks)
   * @param options Amplitude event options.
   */
  systemAbandonAsteroidSystemPrimodiumAbandonAsteroid(
    properties: SystemAbandonAsteroidSystemPrimodiumAbandonAsteroidProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemAbandonAsteroidSystemPrimodiumAbandonAsteroid(properties), options);
  }

  /**
   * system.AcceptJoinRequest
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.AcceptJoinRequest)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceAcceptee)
   * @param options Amplitude event options.
   */
  systemAcceptJoinRequest(
    properties: SystemAcceptJoinRequestProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemAcceptJoinRequest(properties), options);
  }

  /**
   * system.AddOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.AddOrder)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. amountIn)
   * @param options Amplitude event options.
   */
  systemAddOrder(
    properties: SystemAddOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemAddOrder(properties), options);
  }

  /**
   * system.Build
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Build)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemBuild(
    properties: SystemBuildProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemBuild(properties), options);
  }

  /**
   * system.BuildPath
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.BuildPath)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemBuildPath(
    properties: SystemBuildPathProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemBuildPath(properties), options);
  }

  /**
   * system.CancelOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.CancelOrder)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. marketplaceOrderId)
   * @param options Amplitude event options.
   */
  systemCancelOrder(
    properties: SystemCancelOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCancelOrder(properties), options);
  }

  /**
   * system.ClaimFromMine
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimFromMine)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemClaimFromMine(
    properties: SystemClaimFromMineProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimFromMine(properties), options);
  }

  /**
   * system.ClaimObjective
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimObjective)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. objectiveType)
   * @param options Amplitude event options.
   */
  systemClaimObjective(
    properties: SystemClaimObjectiveProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimObjective(properties), options);
  }

  /**
   * system.ClaimPrimodiumSystem.Primodium__claimPrimodium
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimPrimodiumSystem.Primodium__claimPrimodium)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemClaimPrimodiumSystemPrimodiumClaimPrimodium(
    properties: SystemClaimPrimodiumSystemPrimodiumClaimPrimodiumProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimPrimodiumSystemPrimodiumClaimPrimodium(properties), options);
  }

  /**
   * system.ClaimPrimodiumSystem.Primodium__claimShardAsteroidPoints
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimPrimodiumSystem.Primodium__claimShardAsteroidPoints)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemClaimPrimodiumSystemPrimodiumClaimShardAsteroidPoints(
    properties: SystemClaimPrimodiumSystemPrimodiumClaimShardAsteroidPointsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimPrimodiumSystemPrimodiumClaimShardAsteroidPoints(properties), options);
  }

  /**
   * system.ClaimUnitsSystem.Primodium__claimUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ClaimUnitsSystem.Primodium__claimUnits)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemClaimUnitsSystemPrimodiumClaimUnits(
    properties: SystemClaimUnitsSystemPrimodiumClaimUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemClaimUnitsSystemPrimodiumClaimUnits(properties), options);
  }

  /**
   * system.CombatSystem.Primodium__attack
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.CombatSystem.Primodium__attack)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemCombatSystemPrimodiumAttack(
    properties: SystemCombatSystemPrimodiumAttackProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCombatSystemPrimodiumAttack(properties), options);
  }

  /**
   * system.Craft
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Craft)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemCraft(
    properties: SystemCraftProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCraft(properties), options);
  }

  /**
   * system.Create
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Create)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceInviteOnly)
   * @param options Amplitude event options.
   */
  systemCreate(
    properties: SystemCreateProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemCreate(properties), options);
  }

  /**
   * system.DeclineInvite
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.DeclineInvite)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceInviter)
   * @param options Amplitude event options.
   */
  systemDeclineInvite(
    properties: SystemDeclineInviteProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemDeclineInvite(properties), options);
  }

  /**
   * system.Destroy
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Destroy)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemDestroy(
    properties: SystemDestroyProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemDestroy(properties), options);
  }

  /**
   * system.DestroyPath
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.DestroyPath)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemDestroyPath(
    properties: SystemDestroyPathProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemDestroyPath(properties), options);
  }

  /**
   * system.FleetClearSystem.Primodium__abandonFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetClearSystem.Primodium__abandonFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetClearSystemPrimodiumAbandonFleet(
    properties: SystemFleetClearSystemPrimodiumAbandonFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetClearSystemPrimodiumAbandonFleet(properties), options);
  }

  /**
   * system.FleetClearSystem.Primodium__clearFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetClearSystem.Primodium__clearFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetClearSystemPrimodiumClearFleet(
    properties: SystemFleetClearSystemPrimodiumClearFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetClearSystemPrimodiumClearFleet(properties), options);
  }

  /**
   * system.FleetClearSystem.Primodium__clearResources
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetClearSystem.Primodium__clearResources)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetClearSystemPrimodiumClearResources(
    properties: SystemFleetClearSystemPrimodiumClearResourcesProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetClearSystemPrimodiumClearResources(properties), options);
  }

  /**
   * system.FleetClearSystem.Primodium__clearUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetClearSystem.Primodium__clearUnits)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetClearSystemPrimodiumClearUnits(
    properties: SystemFleetClearSystemPrimodiumClearUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetClearSystemPrimodiumClearUnits(properties), options);
  }

  /**
   * system.FleetClearSystem.Primodium__clearUnitsAndResourcesFromFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetClearSystem.Primodium__clearUnitsAndResourcesFromFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetClearSystemPrimodiumClearUnitsAndResourcesFromFleet(
    properties: SystemFleetClearSystemPrimodiumClearUnitsAndResourcesFromFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetClearSystemPrimodiumClearUnitsAndResourcesFromFleet(properties), options);
  }

  /**
   * system.FleetCreateSystem.Primodium__createFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetCreateSystem.Primodium__createFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemFleetCreateSystemPrimodiumCreateFleet(
    properties: SystemFleetCreateSystemPrimodiumCreateFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetCreateSystemPrimodiumCreateFleet(properties), options);
  }

  /**
   * system.FleetLandSystem.Primodium__landFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetLandSystem.Primodium__landFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetLandSystemPrimodiumLandFleet(
    properties: SystemFleetLandSystemPrimodiumLandFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetLandSystemPrimodiumLandFleet(properties), options);
  }

  /**
   * system.FleetMergeSystem.Primodium__mergeFleets
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetMergeSystem.Primodium__mergeFleets)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetMergeSystemPrimodiumMergeFleets(
    properties: SystemFleetMergeSystemPrimodiumMergeFleetsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetMergeSystemPrimodiumMergeFleets(properties), options);
  }

  /**
   * system.FleetRecallSystem.Primodium__recallFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetRecallSystem.Primodium__recallFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetRecallSystemPrimodiumRecallFleet(
    properties: SystemFleetRecallSystemPrimodiumRecallFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetRecallSystemPrimodiumRecallFleet(properties), options);
  }

  /**
   * system.FleetSendSystem.Primodium__sendFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetSendSystem.Primodium__sendFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetSendSystemPrimodiumSendFleet(
    properties: SystemFleetSendSystemPrimodiumSendFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetSendSystemPrimodiumSendFleet(properties), options);
  }

  /**
   * system.FleetStanceSystem.Primodium__clearFleetStance
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetStanceSystem.Primodium__clearFleetStance)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetStanceSystemPrimodiumClearFleetStance(
    properties: SystemFleetStanceSystemPrimodiumClearFleetStanceProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetStanceSystemPrimodiumClearFleetStance(properties), options);
  }

  /**
   * system.FleetStanceSystem.Primodium__setFleetStance
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.FleetStanceSystem.Primodium__setFleetStance)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. fleets)
   * @param options Amplitude event options.
   */
  systemFleetStanceSystemPrimodiumSetFleetStance(
    properties: SystemFleetStanceSystemPrimodiumSetFleetStanceProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemFleetStanceSystemPrimodiumSetFleetStance(properties), options);
  }

  /**
   * system.GrantRole
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.GrantRole)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceMember)
   * @param options Amplitude event options.
   */
  systemGrantRole(
    properties: SystemGrantRoleProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemGrantRole(properties), options);
  }

  /**
   * system.Increment
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Increment)
   *
   * This is a debug system used to test
   *
   * @param properties The event's properties (e.g. currIncrementLevel)
   * @param options Amplitude event options.
   */
  systemIncrement(
    properties: SystemIncrementProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemIncrement(properties), options);
  }

  /**
   * system.Invade
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Invade)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemInvade(
    properties: SystemInvadeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemInvade(properties), options);
  }

  /**
   * system.Invite
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Invite)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceAcceptee)
   * @param options Amplitude event options.
   */
  systemInvite(
    properties: SystemInviteProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemInvite(properties), options);
  }

  /**
   * system.Join
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Join)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemJoin(
    properties: SystemJoinProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemJoin(properties), options);
  }

  /**
   * system.Kick
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Kick)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemKick(
    properties: SystemKickProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemKick(properties), options);
  }

  /**
   * system.Leave
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Leave)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemLeave(
    properties: SystemLeaveProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemLeave(properties), options);
  }

  /**
   * system.MoveBuilding
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.MoveBuilding)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemMoveBuilding(
    properties: SystemMoveBuildingProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemMoveBuilding(properties), options);
  }

  /**
   * system.Raid
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Raid)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRaid(
    properties: SystemRaidProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRaid(properties), options);
  }

  /**
   * system.RecallArrival
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RecallArrival)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRecallArrival(
    properties: SystemRecallArrivalProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRecallArrival(properties), options);
  }

  /**
   * system.RecallReinforcements
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RecallReinforcements)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRecallReinforcements(
    properties: SystemRecallReinforcementsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRecallReinforcements(properties), options);
  }

  /**
   * system.RecallStationedUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RecallStationedUnits)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemRecallStationedUnits(
    properties: SystemRecallStationedUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRecallStationedUnits(properties), options);
  }

  /**
   * system.ReceiveReinforcement
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ReceiveReinforcement)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. arrivalIndex)
   * @param options Amplitude event options.
   */
  systemReceiveReinforcement(
    properties: SystemReceiveReinforcementProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemReceiveReinforcement(properties), options);
  }

  /**
   * system.RegisterDelegation
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RegisterDelegation)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. delegateAddress)
   * @param options Amplitude event options.
   */
  systemRegisterDelegation(
    properties: SystemRegisterDelegationProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRegisterDelegation(properties), options);
  }

  /**
   * system.RejectJoinRequest
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RejectJoinRequest)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemRejectJoinRequest(
    properties: SystemRejectJoinRequestProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRejectJoinRequest(properties), options);
  }

  /**
   * system.RequestToJoin
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.RequestToJoin)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. allianceName)
   * @param options Amplitude event options.
   */
  systemRequestToJoin(
    properties: SystemRequestToJoinProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemRequestToJoin(properties), options);
  }

  /**
   * system.Research
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Research)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. researchType)
   * @param options Amplitude event options.
   */
  systemResearch(
    properties: SystemResearchProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemResearch(properties), options);
  }

  /**
   * system.SendUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.SendUnits)
   *
   * Sends units from an asteroid to another asteroid.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemSendUnits(
    properties: SystemSendUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemSendUnits(properties), options);
  }

  /**
   * system.Spawn
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Spawn)
   *
   * Spawns an asteroid for a player.
   *
   * @param properties The event's properties (e.g. transactionFrom)
   * @param options Amplitude event options.
   */
  systemSpawn(
    properties: SystemSpawnProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemSpawn(properties), options);
  }

  /**
   * system.Swap
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Swap)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. address)
   * @param options Amplitude event options.
   */
  systemSwap(
    properties: SystemSwapProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemSwap(properties), options);
  }

  /**
   * system.TakeOrderBulk
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TakeOrderBulk)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. marketplaceOrderCounts)
   * @param options Amplitude event options.
   */
  systemTakeOrderBulk(
    properties: SystemTakeOrderBulkProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTakeOrderBulk(properties), options);
  }

  /**
   * system.ToggleBuilding
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.ToggleBuilding)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemToggleBuilding(
    properties: SystemToggleBuildingProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemToggleBuilding(properties), options);
  }

  /**
   * system.TrainUnits
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TrainUnits)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. buildingName)
   * @param options Amplitude event options.
   */
  systemTrainUnits(
    properties: SystemTrainUnitsProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTrainUnits(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferResourcesFromAsteroidToFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferResourcesFromAsteroidToFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCounts)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferResourcesFromAsteroidToFleet(
    properties: SystemTransferSystemPrimodiumTransferResourcesFromAsteroidToFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferResourcesFromAsteroidToFleet(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferResourcesFromFleetToAsteroid
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferResourcesFromFleetToAsteroid)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCounts)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferResourcesFromFleetToAsteroid(
    properties: SystemTransferSystemPrimodiumTransferResourcesFromFleetToAsteroidProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferResourcesFromFleetToAsteroid(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferResourcesFromFleetToFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferResourcesFromFleetToFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCounts)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferResourcesFromFleetToFleet(
    properties: SystemTransferSystemPrimodiumTransferResourcesFromFleetToFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferResourcesFromFleetToFleet(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferUnitsAndResourcesFromAsteroidToFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferUnitsAndResourcesFromAsteroidToFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCounts)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferUnitsAndResourcesFromAsteroidToFleet(
    properties: SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromAsteroidToFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromAsteroidToFleet(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferUnitsAndResourcesFromFleetToAsteroid
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferUnitsAndResourcesFromFleetToAsteroid)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCounts)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToAsteroid(
    properties: SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToAsteroidProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToAsteroid(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferUnitsAndResourcesFromFleetToFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferUnitsAndResourcesFromFleetToFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. resourceCounts)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToFleet(
    properties: SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferUnitsAndResourcesFromFleetToFleet(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferUnitsFromAsteroidToFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferUnitsFromAsteroidToFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferUnitsFromAsteroidToFleet(
    properties: SystemTransferSystemPrimodiumTransferUnitsFromAsteroidToFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferUnitsFromAsteroidToFleet(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferUnitsFromFleetToAsteroid
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferUnitsFromFleetToAsteroid)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferUnitsFromFleetToAsteroid(
    properties: SystemTransferSystemPrimodiumTransferUnitsFromFleetToAsteroidProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferUnitsFromFleetToAsteroid(properties), options);
  }

  /**
   * system.TransferSystem.Primodium__transferUnitsFromFleetToFleet
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.TransferSystem.Primodium__transferUnitsFromFleetToFleet)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. spaceRock)
   * @param options Amplitude event options.
   */
  systemTransferSystemPrimodiumTransferUnitsFromFleetToFleet(
    properties: SystemTransferSystemPrimodiumTransferUnitsFromFleetToFleetProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemTransferSystemPrimodiumTransferUnitsFromFleetToFleet(properties), options);
  }

  /**
   * system.UpdateOrder
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.UpdateOrder)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. amountIn)
   * @param options Amplitude event options.
   */
  systemUpdateOrder(
    properties: SystemUpdateOrderProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpdateOrder(properties), options);
  }

  /**
   * system.Upgrade
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.Upgrade)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemUpgrade(
    properties: SystemUpgradeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpgrade(properties), options);
  }

  /**
   * system.UpgradeRange
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.UpgradeRange)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. asteroidCoord)
   * @param options Amplitude event options.
   */
  systemUpgradeRange(
    properties: SystemUpgradeRangeProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpgradeRange(properties), options);
  }

  /**
   * system.UpgradeUnit
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/system.UpgradeUnit)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. currLevel)
   * @param options Amplitude event options.
   */
  systemUpgradeUnit(
    properties: SystemUpgradeUnitProperties,
    options?: EventOptions,
  ) {
    return this.track(new SystemUpgradeUnit(properties), options);
  }

  /**
   * token.Mint
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/token.Mint)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. tokenMintTo)
   * @param options Amplitude event options.
   */
  tokenMint(
    properties: TokenMintProperties,
    options?: EventOptions,
  ) {
    return this.track(new TokenMint(properties), options);
  }

  /**
   * token.Transfer
   *
   * [View in Tracking Plan](https://data.amplitude.com/primodium/primodium-testnet2/events/main/latest/token.Transfer)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. tokenTransferTo)
   * @param options Amplitude event options.
   */
  tokenTransfer(
    properties: TokenTransferProperties,
    options?: EventOptions,
  ) {
    return this.track(new TokenTransfer(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
